// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ExplorerState collects the (internal) state for the explorer.
type PBExplorerState struct {
	CurrentConsensusChangeId []byte `protobuf:"bytes,1,req,name=current_consensus_change_id,json=currentConsensusChangeId" json:"current_consensus_change_id"`
	NextThreebotId           uint32 `protobuf:"varint,2,opt,name=next_threebot_id,json=nextThreebotId" json:"next_threebot_id"`
}

func (m *PBExplorerState) Reset()         { *m = PBExplorerState{} }
func (m *PBExplorerState) String() string { return proto.CompactTextString(m) }
func (*PBExplorerState) ProtoMessage()    {}
func (*PBExplorerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_71c85a8f66ff543a, []int{0}
}
func (m *PBExplorerState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBExplorerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PBExplorerState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PBExplorerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBExplorerState.Merge(dst, src)
}
func (m *PBExplorerState) XXX_Size() int {
	return m.Size()
}
func (m *PBExplorerState) XXX_DiscardUnknown() {
	xxx_messageInfo_PBExplorerState.DiscardUnknown(m)
}

var xxx_messageInfo_PBExplorerState proto.InternalMessageInfo

func (m *PBExplorerState) GetCurrentConsensusChangeId() []byte {
	if m != nil {
		return m.CurrentConsensusChangeId
	}
	return nil
}

func (m *PBExplorerState) GetNextThreebotId() uint32 {
	if m != nil {
		return m.NextThreebotId
	}
	return 0
}

// NetworkInfo defines the info of the chain network data is dumped from,
// used as to prevent name colissions.
type PBNetworkInfo struct {
	ChainName   string `protobuf:"bytes,1,req,name=chain_name,json=chainName" json:"chain_name"`
	NetworkName string `protobuf:"bytes,2,req,name=network_name,json=networkName" json:"network_name"`
}

func (m *PBNetworkInfo) Reset()         { *m = PBNetworkInfo{} }
func (m *PBNetworkInfo) String() string { return proto.CompactTextString(m) }
func (*PBNetworkInfo) ProtoMessage()    {}
func (*PBNetworkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_71c85a8f66ff543a, []int{1}
}
func (m *PBNetworkInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBNetworkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PBNetworkInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PBNetworkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBNetworkInfo.Merge(dst, src)
}
func (m *PBNetworkInfo) XXX_Size() int {
	return m.Size()
}
func (m *PBNetworkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PBNetworkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PBNetworkInfo proto.InternalMessageInfo

func (m *PBNetworkInfo) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *PBNetworkInfo) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func init() {
	proto.RegisterType((*PBExplorerState)(nil), "types.PBExplorerState")
	proto.RegisterType((*PBNetworkInfo)(nil), "types.PBNetworkInfo")
}
func (m *PBExplorerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBExplorerState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentConsensusChangeId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CurrentConsensusChangeId)))
		i += copy(dAtA[i:], m.CurrentConsensusChangeId)
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.NextThreebotId))
	return i, nil
}

func (m *PBNetworkInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBNetworkInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainName)))
	i += copy(dAtA[i:], m.ChainName)
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.NetworkName)))
	i += copy(dAtA[i:], m.NetworkName)
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PBExplorerState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentConsensusChangeId != nil {
		l = len(m.CurrentConsensusChangeId)
		n += 1 + l + sovTypes(uint64(l))
	}
	n += 1 + sovTypes(uint64(m.NextThreebotId))
	return n
}

func (m *PBNetworkInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.NetworkName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PBExplorerState) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBExplorerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBExplorerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentConsensusChangeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentConsensusChangeId = append(m.CurrentConsensusChangeId[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentConsensusChangeId == nil {
				m.CurrentConsensusChangeId = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextThreebotId", wireType)
			}
			m.NextThreebotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextThreebotId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("current_consensus_change_id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBNetworkInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBNetworkInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBNetworkInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("chain_name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("network_name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("types.proto", fileDescriptor_types_71c85a8f66ff543a) }

var fileDescriptor_types_71c85a8f66ff543a = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xda, 0x18, 0xb9, 0xf8,
	0x03, 0x9c, 0x5c, 0x2b, 0x0a, 0x72, 0xf2, 0x8b, 0x52, 0x8b, 0x82, 0x4b, 0x12, 0x4b, 0x52, 0x85,
	0x9c, 0xb9, 0xa4, 0x93, 0x4b, 0x8b, 0x8a, 0x52, 0xf3, 0x4a, 0xe2, 0x93, 0xf3, 0xf3, 0x8a, 0x53,
	0xf3, 0x8a, 0x4b, 0x8b, 0xe3, 0x93, 0x33, 0x12, 0xf3, 0xd2, 0x53, 0xe3, 0x33, 0x53, 0x24, 0x18,
	0x15, 0x98, 0x34, 0x78, 0x9c, 0x58, 0x4e, 0xdc, 0x93, 0x67, 0x08, 0x92, 0x80, 0x2a, 0x74, 0x86,
	0xa9, 0x73, 0x06, 0x2b, 0xf3, 0x4c, 0x11, 0xd2, 0xe3, 0x12, 0xc8, 0x4b, 0xad, 0x28, 0x89, 0x2f,
	0xc9, 0x28, 0x4a, 0x4d, 0x4d, 0xca, 0x2f, 0x01, 0xe9, 0x64, 0x52, 0x60, 0xd4, 0xe0, 0x85, 0xea,
	0xe4, 0x03, 0xc9, 0x86, 0x40, 0x25, 0x3d, 0x53, 0x94, 0x62, 0xb9, 0x78, 0x03, 0x9c, 0xfc, 0x52,
	0x4b, 0xca, 0xf3, 0x8b, 0xb2, 0x3d, 0xf3, 0xd2, 0xf2, 0x85, 0x94, 0xb9, 0xb8, 0x92, 0x33, 0x12,
	0x33, 0xf3, 0xe2, 0xf3, 0x12, 0x73, 0x53, 0xc1, 0x96, 0x72, 0x42, 0xb5, 0x72, 0x82, 0xc5, 0xfd,
	0x12, 0x73, 0x53, 0x85, 0xd4, 0xb9, 0x78, 0xf2, 0x20, 0x7a, 0x20, 0xca, 0x98, 0x90, 0x94, 0x71,
	0x43, 0x65, 0x40, 0x0a, 0x9d, 0x24, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1,
	0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x01,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x82, 0xa8, 0xaf, 0x13, 0x16, 0x01, 0x00, 0x00,
}
