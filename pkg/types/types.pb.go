// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// NetworkStats collects the global statistics for the blockchain.
type PBNetworkStats struct {
	Timestamp                            uint64 `protobuf:"varint,1,req,name=timestamp" json:"timestamp"`
	Blockheight                          uint64 `protobuf:"varint,2,req,name=blockheight" json:"blockheight"`
	TxCount                              uint64 `protobuf:"varint,3,req,name=tx_count,json=txCount" json:"tx_count"`
	CoinCreationTxCount                  uint64 `protobuf:"varint,4,req,name=coin_creation_tx_count,json=coinCreationTxCount" json:"coin_creation_tx_count"`
	CoinCreatorDefTxCount                uint64 `protobuf:"varint,5,req,name=coin_creator_def_tx_count,json=coinCreatorDefTxCount" json:"coin_creator_def_tx_count"`
	ValueTxCount                         uint64 `protobuf:"varint,6,req,name=value_tx_count,json=valueTxCount" json:"value_tx_count"`
	CoinOutputCount                      uint64 `protobuf:"varint,7,req,name=coin_output_count,json=coinOutputCount" json:"coin_output_count"`
	LockedCoinOutputCount                uint64 `protobuf:"varint,8,req,name=locked_coin_output_count,json=lockedCoinOutputCount" json:"locked_coin_output_count"`
	CoinInputCount                       uint64 `protobuf:"varint,9,req,name=coin_input_count,json=coinInputCount" json:"coin_input_count"`
	MinerPayoutCount                     uint64 `protobuf:"varint,10,req,name=miner_payout_count,json=minerPayoutCount" json:"miner_payout_count"`
	TxFeeCount                           uint64 `protobuf:"varint,11,req,name=tx_fee_count,json=txFeeCount" json:"tx_fee_count"`
	MinerPayouts                         []byte `protobuf:"bytes,12,req,name=miner_payouts,json=minerPayouts" json:"miner_payouts"`
	TxFees                               []byte `protobuf:"bytes,13,req,name=tx_fees,json=txFees" json:"tx_fees"`
	Coins                                []byte `protobuf:"bytes,14,req,name=coins" json:"coins"`
	LockedCoins                          []byte `protobuf:"bytes,15,req,name=locked_coins,json=lockedCoins" json:"locked_coins"`
	ThreeBotRegistrationTransactionCount uint64 `protobuf:"varint,16,opt,name=three_bot_registration_transaction_count,json=threeBotRegistrationTransactionCount" json:"three_bot_registration_transaction_count"`
	ThreeBotUpdateTransactionCount       uint64 `protobuf:"varint,17,opt,name=three_bot_update_transaction_count,json=threeBotUpdateTransactionCount" json:"three_bot_update_transaction_count"`
}

func (m *PBNetworkStats) Reset()         { *m = PBNetworkStats{} }
func (m *PBNetworkStats) String() string { return proto.CompactTextString(m) }
func (*PBNetworkStats) ProtoMessage()    {}
func (*PBNetworkStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_6588c4e03e866952, []int{0}
}
func (m *PBNetworkStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBNetworkStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PBNetworkStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PBNetworkStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBNetworkStats.Merge(dst, src)
}
func (m *PBNetworkStats) XXX_Size() int {
	return m.Size()
}
func (m *PBNetworkStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PBNetworkStats.DiscardUnknown(m)
}

var xxx_messageInfo_PBNetworkStats proto.InternalMessageInfo

func (m *PBNetworkStats) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PBNetworkStats) GetBlockheight() uint64 {
	if m != nil {
		return m.Blockheight
	}
	return 0
}

func (m *PBNetworkStats) GetTxCount() uint64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *PBNetworkStats) GetCoinCreationTxCount() uint64 {
	if m != nil {
		return m.CoinCreationTxCount
	}
	return 0
}

func (m *PBNetworkStats) GetCoinCreatorDefTxCount() uint64 {
	if m != nil {
		return m.CoinCreatorDefTxCount
	}
	return 0
}

func (m *PBNetworkStats) GetValueTxCount() uint64 {
	if m != nil {
		return m.ValueTxCount
	}
	return 0
}

func (m *PBNetworkStats) GetCoinOutputCount() uint64 {
	if m != nil {
		return m.CoinOutputCount
	}
	return 0
}

func (m *PBNetworkStats) GetLockedCoinOutputCount() uint64 {
	if m != nil {
		return m.LockedCoinOutputCount
	}
	return 0
}

func (m *PBNetworkStats) GetCoinInputCount() uint64 {
	if m != nil {
		return m.CoinInputCount
	}
	return 0
}

func (m *PBNetworkStats) GetMinerPayoutCount() uint64 {
	if m != nil {
		return m.MinerPayoutCount
	}
	return 0
}

func (m *PBNetworkStats) GetTxFeeCount() uint64 {
	if m != nil {
		return m.TxFeeCount
	}
	return 0
}

func (m *PBNetworkStats) GetMinerPayouts() []byte {
	if m != nil {
		return m.MinerPayouts
	}
	return nil
}

func (m *PBNetworkStats) GetTxFees() []byte {
	if m != nil {
		return m.TxFees
	}
	return nil
}

func (m *PBNetworkStats) GetCoins() []byte {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *PBNetworkStats) GetLockedCoins() []byte {
	if m != nil {
		return m.LockedCoins
	}
	return nil
}

func (m *PBNetworkStats) GetThreeBotRegistrationTransactionCount() uint64 {
	if m != nil {
		return m.ThreeBotRegistrationTransactionCount
	}
	return 0
}

func (m *PBNetworkStats) GetThreeBotUpdateTransactionCount() uint64 {
	if m != nil {
		return m.ThreeBotUpdateTransactionCount
	}
	return 0
}

// Wallet collects all data for an address in a simple format,
// focussing on its balance and multisign properties.
type PBWallet struct {
	BalanceUnlocked    *PBWalletUnlockedBalance `protobuf:"bytes,1,opt,name=balance_unlocked,json=balanceUnlocked" json:"balance_unlocked,omitempty"`
	BalanceLocked      *PBWalletLockedBalance   `protobuf:"bytes,2,opt,name=balance_locked,json=balanceLocked" json:"balance_locked,omitempty"`
	MultisignAddresses [][]byte                 `protobuf:"bytes,3,rep,name=multisign_addresses,json=multisignAddresses" json:"multisign_addresses,omitempty"`
	MultisignData      *PBWalletMultiSignData   `protobuf:"bytes,4,opt,name=multisign_data,json=multisignData" json:"multisign_data,omitempty"`
}

func (m *PBWallet) Reset()         { *m = PBWallet{} }
func (m *PBWallet) String() string { return proto.CompactTextString(m) }
func (*PBWallet) ProtoMessage()    {}
func (*PBWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_6588c4e03e866952, []int{1}
}
func (m *PBWallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PBWallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PBWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBWallet.Merge(dst, src)
}
func (m *PBWallet) XXX_Size() int {
	return m.Size()
}
func (m *PBWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_PBWallet.DiscardUnknown(m)
}

var xxx_messageInfo_PBWallet proto.InternalMessageInfo

func (m *PBWallet) GetBalanceUnlocked() *PBWalletUnlockedBalance {
	if m != nil {
		return m.BalanceUnlocked
	}
	return nil
}

func (m *PBWallet) GetBalanceLocked() *PBWalletLockedBalance {
	if m != nil {
		return m.BalanceLocked
	}
	return nil
}

func (m *PBWallet) GetMultisignAddresses() [][]byte {
	if m != nil {
		return m.MultisignAddresses
	}
	return nil
}

func (m *PBWallet) GetMultisignData() *PBWalletMultiSignData {
	if m != nil {
		return m.MultisignData
	}
	return nil
}

// WalletBalance contains the unlocked balance of a wallet.
type PBWalletUnlockedBalance struct {
	Total   []byte                             `protobuf:"bytes,1,req,name=total" json:"total"`
	Outputs map[string]*PBWalletUnlockedOutput `protobuf:"bytes,2,rep,name=outputs" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PBWalletUnlockedBalance) Reset()         { *m = PBWalletUnlockedBalance{} }
func (m *PBWalletUnlockedBalance) String() string { return proto.CompactTextString(m) }
func (*PBWalletUnlockedBalance) ProtoMessage()    {}
func (*PBWalletUnlockedBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_6588c4e03e866952, []int{2}
}
func (m *PBWalletUnlockedBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBWalletUnlockedBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PBWalletUnlockedBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PBWalletUnlockedBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBWalletUnlockedBalance.Merge(dst, src)
}
func (m *PBWalletUnlockedBalance) XXX_Size() int {
	return m.Size()
}
func (m *PBWalletUnlockedBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_PBWalletUnlockedBalance.DiscardUnknown(m)
}

var xxx_messageInfo_PBWalletUnlockedBalance proto.InternalMessageInfo

func (m *PBWalletUnlockedBalance) GetTotal() []byte {
	if m != nil {
		return m.Total
	}
	return nil
}

func (m *PBWalletUnlockedBalance) GetOutputs() map[string]*PBWalletUnlockedOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

// PBWalletUnlockedOutput defines an unlocked output targeted at a wallet.
type PBWalletUnlockedOutput struct {
	Amount      []byte `protobuf:"bytes,1,req,name=amount" json:"amount"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description"`
}

func (m *PBWalletUnlockedOutput) Reset()         { *m = PBWalletUnlockedOutput{} }
func (m *PBWalletUnlockedOutput) String() string { return proto.CompactTextString(m) }
func (*PBWalletUnlockedOutput) ProtoMessage()    {}
func (*PBWalletUnlockedOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_6588c4e03e866952, []int{3}
}
func (m *PBWalletUnlockedOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBWalletUnlockedOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PBWalletUnlockedOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PBWalletUnlockedOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBWalletUnlockedOutput.Merge(dst, src)
}
func (m *PBWalletUnlockedOutput) XXX_Size() int {
	return m.Size()
}
func (m *PBWalletUnlockedOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_PBWalletUnlockedOutput.DiscardUnknown(m)
}

var xxx_messageInfo_PBWalletUnlockedOutput proto.InternalMessageInfo

func (m *PBWalletUnlockedOutput) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *PBWalletUnlockedOutput) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// WalletBalance contains the locked balance of a wallet.
type PBWalletLockedBalance struct {
	Total   []byte                           `protobuf:"bytes,1,req,name=total" json:"total"`
	Outputs map[string]*PBWalletLockedOutput `protobuf:"bytes,2,rep,name=outputs" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PBWalletLockedBalance) Reset()         { *m = PBWalletLockedBalance{} }
func (m *PBWalletLockedBalance) String() string { return proto.CompactTextString(m) }
func (*PBWalletLockedBalance) ProtoMessage()    {}
func (*PBWalletLockedBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_6588c4e03e866952, []int{4}
}
func (m *PBWalletLockedBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBWalletLockedBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PBWalletLockedBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PBWalletLockedBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBWalletLockedBalance.Merge(dst, src)
}
func (m *PBWalletLockedBalance) XXX_Size() int {
	return m.Size()
}
func (m *PBWalletLockedBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_PBWalletLockedBalance.DiscardUnknown(m)
}

var xxx_messageInfo_PBWalletLockedBalance proto.InternalMessageInfo

func (m *PBWalletLockedBalance) GetTotal() []byte {
	if m != nil {
		return m.Total
	}
	return nil
}

func (m *PBWalletLockedBalance) GetOutputs() map[string]*PBWalletLockedOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

// WalletLockedOutput defines a locked output targeted at a wallet.
type PBWalletLockedOutput struct {
	Amount      []byte `protobuf:"bytes,1,req,name=amount" json:"amount"`
	LockedUntil uint64 `protobuf:"varint,2,req,name=locked_until,json=lockedUntil" json:"locked_until"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description"`
}

func (m *PBWalletLockedOutput) Reset()         { *m = PBWalletLockedOutput{} }
func (m *PBWalletLockedOutput) String() string { return proto.CompactTextString(m) }
func (*PBWalletLockedOutput) ProtoMessage()    {}
func (*PBWalletLockedOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_6588c4e03e866952, []int{5}
}
func (m *PBWalletLockedOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBWalletLockedOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PBWalletLockedOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PBWalletLockedOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBWalletLockedOutput.Merge(dst, src)
}
func (m *PBWalletLockedOutput) XXX_Size() int {
	return m.Size()
}
func (m *PBWalletLockedOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_PBWalletLockedOutput.DiscardUnknown(m)
}

var xxx_messageInfo_PBWalletLockedOutput proto.InternalMessageInfo

func (m *PBWalletLockedOutput) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *PBWalletLockedOutput) GetLockedUntil() uint64 {
	if m != nil {
		return m.LockedUntil
	}
	return 0
}

func (m *PBWalletLockedOutput) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// WalletMultiSignData defines the extra data defined for a MultiSignWallet.
type PBWalletMultiSignData struct {
	SignaturesRequired uint64   `protobuf:"varint,1,req,name=signatures_required,json=signaturesRequired" json:"signatures_required"`
	Owners             [][]byte `protobuf:"bytes,2,rep,name=owners" json:"owners,omitempty"`
}

func (m *PBWalletMultiSignData) Reset()         { *m = PBWalletMultiSignData{} }
func (m *PBWalletMultiSignData) String() string { return proto.CompactTextString(m) }
func (*PBWalletMultiSignData) ProtoMessage()    {}
func (*PBWalletMultiSignData) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_6588c4e03e866952, []int{6}
}
func (m *PBWalletMultiSignData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBWalletMultiSignData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PBWalletMultiSignData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PBWalletMultiSignData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBWalletMultiSignData.Merge(dst, src)
}
func (m *PBWalletMultiSignData) XXX_Size() int {
	return m.Size()
}
func (m *PBWalletMultiSignData) XXX_DiscardUnknown() {
	xxx_messageInfo_PBWalletMultiSignData.DiscardUnknown(m)
}

var xxx_messageInfo_PBWalletMultiSignData proto.InternalMessageInfo

func (m *PBWalletMultiSignData) GetSignaturesRequired() uint64 {
	if m != nil {
		return m.SignaturesRequired
	}
	return 0
}

func (m *PBWalletMultiSignData) GetOwners() [][]byte {
	if m != nil {
		return m.Owners
	}
	return nil
}

// PBThreeBotRecord defines a 3Bot record in a ProtoBuf-friendly format.
type PBThreeBotRecord struct {
	Id               uint32 `protobuf:"varint,1,req,name=id" json:"id"`
	NetworkAddresses []byte `protobuf:"bytes,2,req,name=network_addresses,json=networkAddresses" json:"network_addresses"`
	Names            []byte `protobuf:"bytes,3,req,name=names" json:"names"`
	ExpirationTime   []byte `protobuf:"bytes,4,req,name=expiration_time,json=expirationTime" json:"expiration_time"`
	PublicKey        []byte `protobuf:"bytes,5,req,name=public_key,json=publicKey" json:"public_key"`
}

func (m *PBThreeBotRecord) Reset()         { *m = PBThreeBotRecord{} }
func (m *PBThreeBotRecord) String() string { return proto.CompactTextString(m) }
func (*PBThreeBotRecord) ProtoMessage()    {}
func (*PBThreeBotRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_6588c4e03e866952, []int{7}
}
func (m *PBThreeBotRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBThreeBotRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PBThreeBotRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PBThreeBotRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBThreeBotRecord.Merge(dst, src)
}
func (m *PBThreeBotRecord) XXX_Size() int {
	return m.Size()
}
func (m *PBThreeBotRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PBThreeBotRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PBThreeBotRecord proto.InternalMessageInfo

func (m *PBThreeBotRecord) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PBThreeBotRecord) GetNetworkAddresses() []byte {
	if m != nil {
		return m.NetworkAddresses
	}
	return nil
}

func (m *PBThreeBotRecord) GetNames() []byte {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *PBThreeBotRecord) GetExpirationTime() []byte {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

func (m *PBThreeBotRecord) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func init() {
	proto.RegisterType((*PBNetworkStats)(nil), "types.PBNetworkStats")
	proto.RegisterType((*PBWallet)(nil), "types.PBWallet")
	proto.RegisterType((*PBWalletUnlockedBalance)(nil), "types.PBWalletUnlockedBalance")
	proto.RegisterMapType((map[string]*PBWalletUnlockedOutput)(nil), "types.PBWalletUnlockedBalance.OutputsEntry")
	proto.RegisterType((*PBWalletUnlockedOutput)(nil), "types.PBWalletUnlockedOutput")
	proto.RegisterType((*PBWalletLockedBalance)(nil), "types.PBWalletLockedBalance")
	proto.RegisterMapType((map[string]*PBWalletLockedOutput)(nil), "types.PBWalletLockedBalance.OutputsEntry")
	proto.RegisterType((*PBWalletLockedOutput)(nil), "types.PBWalletLockedOutput")
	proto.RegisterType((*PBWalletMultiSignData)(nil), "types.PBWalletMultiSignData")
	proto.RegisterType((*PBThreeBotRecord)(nil), "types.PBThreeBotRecord")
}
func (m *PBNetworkStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBNetworkStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Timestamp))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Blockheight))
	dAtA[i] = 0x18
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.TxCount))
	dAtA[i] = 0x20
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.CoinCreationTxCount))
	dAtA[i] = 0x28
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.CoinCreatorDefTxCount))
	dAtA[i] = 0x30
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.ValueTxCount))
	dAtA[i] = 0x38
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.CoinOutputCount))
	dAtA[i] = 0x40
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.LockedCoinOutputCount))
	dAtA[i] = 0x48
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.CoinInputCount))
	dAtA[i] = 0x50
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.MinerPayoutCount))
	dAtA[i] = 0x58
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.TxFeeCount))
	if m.MinerPayouts != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MinerPayouts)))
		i += copy(dAtA[i:], m.MinerPayouts)
	}
	if m.TxFees != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxFees)))
		i += copy(dAtA[i:], m.TxFees)
	}
	if m.Coins != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Coins)))
		i += copy(dAtA[i:], m.Coins)
	}
	if m.LockedCoins != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LockedCoins)))
		i += copy(dAtA[i:], m.LockedCoins)
	}
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.ThreeBotRegistrationTransactionCount))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.ThreeBotUpdateTransactionCount))
	return i, nil
}

func (m *PBWallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBWallet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BalanceUnlocked != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BalanceUnlocked.Size()))
		n1, err := m.BalanceUnlocked.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.BalanceLocked != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BalanceLocked.Size()))
		n2, err := m.BalanceLocked.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.MultisignAddresses) > 0 {
		for _, b := range m.MultisignAddresses {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.MultisignData != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MultisignData.Size()))
		n3, err := m.MultisignData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *PBWalletUnlockedBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBWalletUnlockedBalance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Total)))
		i += copy(dAtA[i:], m.Total)
	}
	if len(m.Outputs) > 0 {
		for k, _ := range m.Outputs {
			dAtA[i] = 0x12
			i++
			v := m.Outputs[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func (m *PBWalletUnlockedOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBWalletUnlockedOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Amount)))
		i += copy(dAtA[i:], m.Amount)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
	i += copy(dAtA[i:], m.Description)
	return i, nil
}

func (m *PBWalletLockedBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBWalletLockedBalance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Total)))
		i += copy(dAtA[i:], m.Total)
	}
	if len(m.Outputs) > 0 {
		for k, _ := range m.Outputs {
			dAtA[i] = 0x12
			i++
			v := m.Outputs[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	return i, nil
}

func (m *PBWalletLockedOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBWalletLockedOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Amount)))
		i += copy(dAtA[i:], m.Amount)
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.LockedUntil))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
	i += copy(dAtA[i:], m.Description)
	return i, nil
}

func (m *PBWalletMultiSignData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBWalletMultiSignData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.SignaturesRequired))
	if len(m.Owners) > 0 {
		for _, b := range m.Owners {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *PBThreeBotRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBThreeBotRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Id))
	if m.NetworkAddresses != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NetworkAddresses)))
		i += copy(dAtA[i:], m.NetworkAddresses)
	}
	if m.Names != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Names)))
		i += copy(dAtA[i:], m.Names)
	}
	if m.ExpirationTime != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExpirationTime)))
		i += copy(dAtA[i:], m.ExpirationTime)
	}
	if m.PublicKey != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PBNetworkStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Timestamp))
	n += 1 + sovTypes(uint64(m.Blockheight))
	n += 1 + sovTypes(uint64(m.TxCount))
	n += 1 + sovTypes(uint64(m.CoinCreationTxCount))
	n += 1 + sovTypes(uint64(m.CoinCreatorDefTxCount))
	n += 1 + sovTypes(uint64(m.ValueTxCount))
	n += 1 + sovTypes(uint64(m.CoinOutputCount))
	n += 1 + sovTypes(uint64(m.LockedCoinOutputCount))
	n += 1 + sovTypes(uint64(m.CoinInputCount))
	n += 1 + sovTypes(uint64(m.MinerPayoutCount))
	n += 1 + sovTypes(uint64(m.TxFeeCount))
	if m.MinerPayouts != nil {
		l = len(m.MinerPayouts)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TxFees != nil {
		l = len(m.TxFees)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Coins != nil {
		l = len(m.Coins)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LockedCoins != nil {
		l = len(m.LockedCoins)
		n += 1 + l + sovTypes(uint64(l))
	}
	n += 2 + sovTypes(uint64(m.ThreeBotRegistrationTransactionCount))
	n += 2 + sovTypes(uint64(m.ThreeBotUpdateTransactionCount))
	return n
}

func (m *PBWallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BalanceUnlocked != nil {
		l = m.BalanceUnlocked.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BalanceLocked != nil {
		l = m.BalanceLocked.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.MultisignAddresses) > 0 {
		for _, b := range m.MultisignAddresses {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MultisignData != nil {
		l = m.MultisignData.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PBWalletUnlockedBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != nil {
		l = len(m.Total)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Outputs) > 0 {
		for k, v := range m.Outputs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PBWalletUnlockedOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = len(m.Amount)
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Description)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *PBWalletLockedBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != nil {
		l = len(m.Total)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Outputs) > 0 {
		for k, v := range m.Outputs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PBWalletLockedOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = len(m.Amount)
		n += 1 + l + sovTypes(uint64(l))
	}
	n += 1 + sovTypes(uint64(m.LockedUntil))
	l = len(m.Description)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *PBWalletMultiSignData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.SignaturesRequired))
	if len(m.Owners) > 0 {
		for _, b := range m.Owners {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PBThreeBotRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Id))
	if m.NetworkAddresses != nil {
		l = len(m.NetworkAddresses)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Names != nil {
		l = len(m.Names)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ExpirationTime != nil {
		l = len(m.ExpirationTime)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PublicKey != nil {
		l = len(m.PublicKey)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PBNetworkStats) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBNetworkStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBNetworkStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockheight", wireType)
			}
			m.Blockheight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blockheight |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			m.TxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreationTxCount", wireType)
			}
			m.CoinCreationTxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinCreationTxCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreatorDefTxCount", wireType)
			}
			m.CoinCreatorDefTxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinCreatorDefTxCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueTxCount", wireType)
			}
			m.ValueTxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueTxCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinOutputCount", wireType)
			}
			m.CoinOutputCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinOutputCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedCoinOutputCount", wireType)
			}
			m.LockedCoinOutputCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedCoinOutputCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinInputCount", wireType)
			}
			m.CoinInputCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinInputCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinerPayoutCount", wireType)
			}
			m.MinerPayoutCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinerPayoutCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFeeCount", wireType)
			}
			m.TxFeeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFeeCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinerPayouts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinerPayouts = append(m.MinerPayouts[:0], dAtA[iNdEx:postIndex]...)
			if m.MinerPayouts == nil {
				m.MinerPayouts = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000800)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFees", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxFees = append(m.TxFees[:0], dAtA[iNdEx:postIndex]...)
			if m.TxFees == nil {
				m.TxFees = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00001000)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins[:0], dAtA[iNdEx:postIndex]...)
			if m.Coins == nil {
				m.Coins = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00002000)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedCoins", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedCoins = append(m.LockedCoins[:0], dAtA[iNdEx:postIndex]...)
			if m.LockedCoins == nil {
				m.LockedCoins = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00004000)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreeBotRegistrationTransactionCount", wireType)
			}
			m.ThreeBotRegistrationTransactionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreeBotRegistrationTransactionCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreeBotUpdateTransactionCount", wireType)
			}
			m.ThreeBotUpdateTransactionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreeBotUpdateTransactionCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("timestamp")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("blockheight")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("tx_count")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("coin_creation_tx_count")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("coin_creator_def_tx_count")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("value_tx_count")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("coin_output_count")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("locked_coin_output_count")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("coin_input_count")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("miner_payout_count")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("tx_fee_count")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("miner_payouts")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("tx_fees")
	}
	if hasFields[0]&uint64(0x00002000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("coins")
	}
	if hasFields[0]&uint64(0x00004000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("locked_coins")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBWallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBWallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBWallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceUnlocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BalanceUnlocked == nil {
				m.BalanceUnlocked = &PBWalletUnlockedBalance{}
			}
			if err := m.BalanceUnlocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceLocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BalanceLocked == nil {
				m.BalanceLocked = &PBWalletLockedBalance{}
			}
			if err := m.BalanceLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisignAddresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultisignAddresses = append(m.MultisignAddresses, make([]byte, postIndex-iNdEx))
			copy(m.MultisignAddresses[len(m.MultisignAddresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisignData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MultisignData == nil {
				m.MultisignData = &PBWalletMultiSignData{}
			}
			if err := m.MultisignData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBWalletUnlockedBalance) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBWalletUnlockedBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBWalletUnlockedBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = append(m.Total[:0], dAtA[iNdEx:postIndex]...)
			if m.Total == nil {
				m.Total = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Outputs == nil {
				m.Outputs = make(map[string]*PBWalletUnlockedOutput)
			}
			var mapkey string
			var mapvalue *PBWalletUnlockedOutput
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PBWalletUnlockedOutput{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Outputs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("total")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBWalletUnlockedOutput) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBWalletUnlockedOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBWalletUnlockedOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount[:0], dAtA[iNdEx:postIndex]...)
			if m.Amount == nil {
				m.Amount = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("amount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBWalletLockedBalance) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBWalletLockedBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBWalletLockedBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = append(m.Total[:0], dAtA[iNdEx:postIndex]...)
			if m.Total == nil {
				m.Total = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Outputs == nil {
				m.Outputs = make(map[string]*PBWalletLockedOutput)
			}
			var mapkey string
			var mapvalue *PBWalletLockedOutput
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PBWalletLockedOutput{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Outputs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("total")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBWalletLockedOutput) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBWalletLockedOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBWalletLockedOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount[:0], dAtA[iNdEx:postIndex]...)
			if m.Amount == nil {
				m.Amount = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedUntil", wireType)
			}
			m.LockedUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedUntil |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("amount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("locked_until")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBWalletMultiSignData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBWalletMultiSignData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBWalletMultiSignData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignaturesRequired", wireType)
			}
			m.SignaturesRequired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignaturesRequired |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owners = append(m.Owners, make([]byte, postIndex-iNdEx))
			copy(m.Owners[len(m.Owners)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("signatures_required")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBThreeBotRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBThreeBotRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBThreeBotRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddresses = append(m.NetworkAddresses[:0], dAtA[iNdEx:postIndex]...)
			if m.NetworkAddresses == nil {
				m.NetworkAddresses = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names[:0], dAtA[iNdEx:postIndex]...)
			if m.Names == nil {
				m.Names = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationTime = append(m.ExpirationTime[:0], dAtA[iNdEx:postIndex]...)
			if m.ExpirationTime == nil {
				m.ExpirationTime = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("network_addresses")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("names")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("expiration_time")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("public_key")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("types.proto", fileDescriptor_types_6588c4e03e866952) }

var fileDescriptor_types_6588c4e03e866952 = []byte{
	// 888 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x5b, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xae, 0x63, 0x27, 0x39, 0xbe, 0xc4, 0x99, 0xb4, 0x61, 0x09, 0xad, 0x6b, 0x19, 0x54,
	0x5c, 0x10, 0x81, 0x06, 0x21, 0x01, 0x12, 0x48, 0xd8, 0x2d, 0x52, 0xc5, 0xcd, 0xda, 0x26, 0xe2,
	0x05, 0x58, 0x4d, 0x76, 0x27, 0xc9, 0x28, 0xeb, 0xdd, 0x65, 0x66, 0x96, 0xda, 0x3f, 0x80, 0xf7,
	0xfe, 0xac, 0x4a, 0xbc, 0xf4, 0x0d, 0x5e, 0x40, 0x55, 0xf2, 0x47, 0xd0, 0x5c, 0x76, 0x77, 0xe2,
	0xda, 0x81, 0x37, 0xfb, 0x7c, 0x97, 0xb3, 0xf3, 0xed, 0x39, 0xb3, 0xd0, 0x14, 0xf3, 0x8c, 0xf0,
	0x83, 0x8c, 0xa5, 0x22, 0x45, 0x75, 0xf5, 0x67, 0xf0, 0xaa, 0x01, 0x9d, 0xc9, 0xe8, 0x7b, 0x22,
	0x9e, 0xa5, 0xec, 0xe2, 0xa9, 0xc0, 0x82, 0xa3, 0x01, 0x6c, 0x09, 0x3a, 0x25, 0x5c, 0xe0, 0x69,
	0xe6, 0x39, 0x7d, 0x77, 0xb8, 0x3e, 0x5a, 0x7f, 0xf1, 0xcf, 0xbd, 0x35, 0xbf, 0x2a, 0xa3, 0xfb,
	0xd0, 0x3c, 0x89, 0xd3, 0xf0, 0xe2, 0x9c, 0xd0, 0xb3, 0x73, 0xe1, 0xb9, 0x16, 0xcb, 0x06, 0xd0,
	0x3d, 0xd8, 0x14, 0xb3, 0x20, 0x4c, 0xf3, 0x44, 0x78, 0x35, 0x8b, 0xb4, 0x21, 0x66, 0x63, 0x59,
	0x44, 0x9f, 0xc1, 0x5e, 0x98, 0xd2, 0x24, 0x08, 0x19, 0xc1, 0x82, 0xa6, 0x49, 0x50, 0xd2, 0xd7,
	0x2d, 0xfa, 0xae, 0xe4, 0x8c, 0x0d, 0xe5, 0xc8, 0x48, 0xbf, 0x84, 0x37, 0x2b, 0x69, 0xca, 0x82,
	0x88, 0x9c, 0x56, 0xea, 0xba, 0xa5, 0xbe, 0x5d, 0xaa, 0x53, 0xf6, 0x88, 0x9c, 0x16, 0xfa, 0xf7,
	0xa0, 0xf3, 0x1b, 0x8e, 0x73, 0x52, 0x89, 0x1a, 0x96, 0xa8, 0xa5, 0xb0, 0x82, 0xfb, 0x11, 0xec,
	0xa8, 0x5e, 0x69, 0x2e, 0xb2, 0x5c, 0x18, 0xfa, 0x86, 0x45, 0xdf, 0x96, 0xf0, 0x0f, 0x0a, 0xd5,
	0x8a, 0x2f, 0xc0, 0x93, 0x39, 0x90, 0x28, 0x78, 0x5d, 0xb8, 0x69, 0x3f, 0x9c, 0x66, 0x8d, 0x17,
	0xe4, 0x07, 0xd0, 0x55, 0x3a, 0x9a, 0x54, 0xb2, 0x2d, 0x4b, 0xd6, 0x91, 0xe8, 0x93, 0xa4, 0xe4,
	0x1f, 0x02, 0x9a, 0xd2, 0x84, 0xb0, 0x20, 0xc3, 0xf3, 0xb4, 0x54, 0x80, 0xa5, 0xe8, 0x2a, 0x7c,
	0xa2, 0x60, 0xad, 0xb9, 0x0f, 0x2d, 0x31, 0x0b, 0x4e, 0x09, 0x31, 0xec, 0xa6, 0xc5, 0x06, 0x31,
	0xfb, 0x9a, 0x10, 0xcd, 0x7b, 0x00, 0x6d, 0xdb, 0x9b, 0x7b, 0xad, 0xbe, 0x3b, 0x6c, 0x15, 0x39,
	0x59, 0xb6, 0x1c, 0xdd, 0x85, 0x0d, 0x6d, 0xc9, 0xbd, 0xb6, 0x45, 0x6a, 0x28, 0x37, 0x8e, 0xf6,
	0xa1, 0x2e, 0x9f, 0x9b, 0x7b, 0x1d, 0x0b, 0xd4, 0x25, 0xf4, 0x2e, 0xb4, 0xac, 0xc0, 0xb8, 0xb7,
	0x6d, 0x51, 0x9a, 0x55, 0x48, 0x1c, 0xfd, 0x04, 0x43, 0x71, 0xce, 0x08, 0x09, 0x4e, 0x52, 0x11,
	0x30, 0x72, 0x46, 0xb9, 0x60, 0x66, 0x76, 0x18, 0x4e, 0x38, 0x0e, 0xd5, 0x6f, 0x7d, 0xa4, 0x6e,
	0xdf, 0x29, 0x8f, 0xf4, 0x8e, 0x52, 0x8d, 0x52, 0xe1, 0x5b, 0x9a, 0xa3, 0x4a, 0xa2, 0x0f, 0x3b,
	0x81, 0x41, 0xe5, 0x9e, 0x67, 0x11, 0x16, 0x64, 0x89, 0xef, 0x8e, 0xe5, 0xdb, 0x2b, 0x7c, 0x8f,
	0x15, 0x7b, 0xd1, 0x71, 0xf0, 0xdc, 0x85, 0xcd, 0xc9, 0xe8, 0x47, 0x1c, 0xc7, 0x44, 0xa0, 0x27,
	0xd0, 0x3d, 0xc1, 0x31, 0x4e, 0x42, 0x12, 0xe4, 0x89, 0x3e, 0x95, 0xe7, 0xf4, 0x9d, 0x61, 0xf3,
	0xb0, 0x77, 0xa0, 0xd7, 0xb3, 0xa0, 0x1e, 0x1b, 0x78, 0xa4, 0xe9, 0xfe, 0xb6, 0xd1, 0x15, 0x75,
	0x34, 0x86, 0x4e, 0x61, 0x65, 0x8c, 0x5c, 0x65, 0x74, 0x67, 0xc1, 0xe8, 0xdb, 0x6b, 0x36, 0x6d,
	0xa3, 0xd1, 0x55, 0xf4, 0x21, 0xec, 0x4e, 0xf3, 0x58, 0x50, 0x4e, 0xcf, 0x92, 0x00, 0x47, 0x11,
	0x23, 0x9c, 0x13, 0xee, 0xd5, 0xfa, 0xb5, 0x61, 0xcb, 0x47, 0x25, 0xf4, 0x55, 0x81, 0xc8, 0xae,
	0x95, 0x20, 0xc2, 0x02, 0x7b, 0xeb, 0x4b, 0xbb, 0x7e, 0x27, 0x49, 0x4f, 0xe9, 0x59, 0xf2, 0x08,
	0x0b, 0xec, 0xb7, 0x4b, 0x8d, 0xfc, 0x3b, 0xf8, 0xdb, 0x81, 0x37, 0x56, 0x9c, 0x53, 0xce, 0x88,
	0x48, 0x05, 0x8e, 0xd5, 0xd5, 0x53, 0xce, 0x88, 0x2a, 0xa1, 0xc7, 0xb0, 0xa1, 0x17, 0x89, 0x7b,
	0x6e, 0xbf, 0x36, 0x6c, 0x1e, 0xbe, 0x7f, 0x73, 0x68, 0x07, 0x7a, 0xa5, 0xf8, 0xe3, 0x44, 0xb0,
	0xb9, 0x5f, 0x68, 0xf7, 0x03, 0x68, 0xd9, 0x00, 0xda, 0x83, 0xda, 0x05, 0x99, 0xab, 0xf7, 0xb0,
	0x65, 0x1a, 0xca, 0x02, 0xfa, 0x18, 0xea, 0xea, 0x16, 0x30, 0xc1, 0xde, 0x5d, 0xd1, 0x4c, 0x7b,
	0xf9, 0x9a, 0xfb, 0xb9, 0xfb, 0xa9, 0x33, 0xf8, 0x05, 0xf6, 0x96, 0x93, 0xd0, 0x1d, 0x68, 0xe0,
	0xa9, 0x1a, 0x21, 0xfb, 0x78, 0xa6, 0x26, 0xaf, 0xd5, 0x88, 0xf0, 0x90, 0xd1, 0x4c, 0x8e, 0x8f,
	0x6a, 0x5b, 0x3c, 0x90, 0x0d, 0x0c, 0xfe, 0x74, 0xe0, 0xf6, 0xd2, 0xd7, 0x7b, 0x63, 0x7a, 0xe3,
	0xc5, 0xf4, 0x1e, 0xdc, 0x34, 0x29, 0x2b, 0xb2, 0xfb, 0xf9, 0x7f, 0x66, 0xf7, 0xf0, 0x7a, 0x76,
	0x6f, 0x2d, 0x6d, 0xf5, 0x7a, 0x72, 0xbf, 0x3b, 0x70, 0x6b, 0x19, 0xe7, 0x3f, 0x82, 0xab, 0x2e,
	0x8f, 0x3c, 0x11, 0x34, 0xbe, 0xfe, 0x41, 0xd2, 0xc8, 0xb1, 0x04, 0x16, 0x13, 0xae, 0xad, 0x4a,
	0xf8, 0xb4, 0x0a, 0xf8, 0xda, 0x24, 0xa3, 0x4f, 0x60, 0x57, 0x8e, 0x31, 0x16, 0x39, 0x23, 0x3c,
	0x60, 0xe4, 0xd7, 0x9c, 0x32, 0xb5, 0xc3, 0x55, 0x43, 0x54, 0x11, 0x7c, 0x83, 0xa3, 0x3d, 0x68,
	0xa4, 0xcf, 0x12, 0xc2, 0x74, 0xf4, 0x2d, 0xdf, 0xfc, 0x1b, 0xfc, 0xe1, 0x40, 0x77, 0x32, 0x3a,
	0x2a, 0x6f, 0xa6, 0x30, 0x65, 0x11, 0xba, 0x05, 0x2e, 0xd5, 0x96, 0x6d, 0x63, 0xe9, 0xd2, 0x08,
	0x3d, 0x84, 0x9d, 0x44, 0x7f, 0xa7, 0xad, 0x45, 0x75, 0xad, 0x30, 0xba, 0x06, 0xae, 0x96, 0x75,
	0x1f, 0xea, 0x09, 0x9e, 0xaa, 0x7d, 0xb6, 0xa6, 0x41, 0x95, 0xd0, 0x07, 0xb0, 0x4d, 0x66, 0x19,
	0x2d, 0xae, 0x4e, 0x3a, 0x25, 0xea, 0x93, 0x5b, 0xb0, 0x3a, 0x15, 0x78, 0x44, 0xa7, 0x04, 0xbd,
	0x0d, 0x90, 0xe5, 0x27, 0x31, 0x0d, 0x03, 0xf9, 0xba, 0xeb, 0x16, 0x73, 0x4b, 0xd7, 0xbf, 0x21,
	0xf3, 0x91, 0xf7, 0xe2, 0xb2, 0xe7, 0xbc, 0xbc, 0xec, 0x39, 0xaf, 0x2e, 0x7b, 0xce, 0xf3, 0xab,
	0xde, 0xda, 0xcb, 0xab, 0xde, 0xda, 0x5f, 0x57, 0xbd, 0xb5, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xa3, 0xe2, 0x98, 0x40, 0x7c, 0x08, 0x00, 0x00,
}
