package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *EncodableWallet) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "b":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Balance = nil
			} else {
				if z.Balance == nil {
					z.Balance = new(EncodableWalletBalance)
				}
				err = z.Balance.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "ma":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.MultiSignAddresses) >= int(zb0002) {
				z.MultiSignAddresses = (z.MultiSignAddresses)[:zb0002]
			} else {
				z.MultiSignAddresses = make([]UnlockHash, zb0002)
			}
			for za0001 := range z.MultiSignAddresses {
				err = z.MultiSignAddresses[za0001].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "m":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.MultiSignData = nil
			} else {
				if z.MultiSignData == nil {
					z.MultiSignData = new(WalletMultiSignData)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "o":
						var zb0004 uint32
						zb0004, err = dc.ReadArrayHeader()
						if err != nil {
							return
						}
						if cap(z.MultiSignData.Owners) >= int(zb0004) {
							z.MultiSignData.Owners = (z.MultiSignData.Owners)[:zb0004]
						} else {
							z.MultiSignData.Owners = make([]UnlockHash, zb0004)
						}
						for za0002 := range z.MultiSignData.Owners {
							err = z.MultiSignData.Owners[za0002].DecodeMsg(dc)
							if err != nil {
								return
							}
						}
					case "sr":
						z.MultiSignData.SignaturesRequired, err = dc.ReadUint64()
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EncodableWallet) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "b"
	err = en.Append(0x83, 0xa1, 0x62)
	if err != nil {
		return
	}
	if z.Balance == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Balance.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "ma"
	err = en.Append(0xa2, 0x6d, 0x61)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.MultiSignAddresses)))
	if err != nil {
		return
	}
	for za0001 := range z.MultiSignAddresses {
		err = z.MultiSignAddresses[za0001].EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "m"
	err = en.Append(0xa1, 0x6d)
	if err != nil {
		return
	}
	if z.MultiSignData == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "o"
		err = en.Append(0x82, 0xa1, 0x6f)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.MultiSignData.Owners)))
		if err != nil {
			return
		}
		for za0002 := range z.MultiSignData.Owners {
			err = z.MultiSignData.Owners[za0002].EncodeMsg(en)
			if err != nil {
				return
			}
		}
		// write "sr"
		err = en.Append(0xa2, 0x73, 0x72)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.MultiSignData.SignaturesRequired)
		if err != nil {
			return
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EncodableWallet) Msgsize() (s int) {
	s = 1 + 2
	if z.Balance == nil {
		s += msgp.NilSize
	} else {
		s += z.Balance.Msgsize()
	}
	s += 3 + msgp.ArrayHeaderSize
	for za0001 := range z.MultiSignAddresses {
		s += z.MultiSignAddresses[za0001].Msgsize()
	}
	s += 2
	if z.MultiSignData == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 2 + msgp.ArrayHeaderSize
		for za0002 := range z.MultiSignData.Owners {
			s += z.MultiSignData.Owners[za0002].Msgsize()
		}
		s += 3 + msgp.Uint64Size
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EncodableWalletBalance) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "u":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Unlocked = nil
			} else {
				if z.Unlocked == nil {
					z.Unlocked = new(WalletUnlockedBalance)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "t":
						err = z.Unlocked.Total.DecodeMsg(dc)
						if err != nil {
							return
						}
					case "o":
						var zb0003 uint32
						zb0003, err = dc.ReadMapHeader()
						if err != nil {
							return
						}
						if z.Unlocked.Outputs == nil {
							z.Unlocked.Outputs = make(WalletUnlockedOutputMap, zb0003)
						} else if len(z.Unlocked.Outputs) > 0 {
							for key := range z.Unlocked.Outputs {
								delete(z.Unlocked.Outputs, key)
							}
						}
						for zb0003 > 0 {
							zb0003--
							var za0001 string
							var za0002 WalletUnlockedOutput
							za0001, err = dc.ReadString()
							if err != nil {
								return
							}
							var zb0004 uint32
							zb0004, err = dc.ReadMapHeader()
							if err != nil {
								return
							}
							for zb0004 > 0 {
								zb0004--
								field, err = dc.ReadMapKeyPtr()
								if err != nil {
									return
								}
								switch msgp.UnsafeString(field) {
								case "a":
									err = za0002.Amount.DecodeMsg(dc)
									if err != nil {
										return
									}
								case "d":
									za0002.Description, err = dc.ReadString()
									if err != nil {
										return
									}
								default:
									err = dc.Skip()
									if err != nil {
										return
									}
								}
							}
							z.Unlocked.Outputs[za0001] = za0002
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
			}
		case "l":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Locked = nil
			} else {
				if z.Locked == nil {
					z.Locked = new(WalletLockedBalance)
				}
				var zb0005 uint32
				zb0005, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "t":
						err = z.Locked.Total.DecodeMsg(dc)
						if err != nil {
							return
						}
					case "o":
						var zb0006 uint32
						zb0006, err = dc.ReadMapHeader()
						if err != nil {
							return
						}
						if z.Locked.Outputs == nil {
							z.Locked.Outputs = make(WalletLockedOutputMap, zb0006)
						} else if len(z.Locked.Outputs) > 0 {
							for key := range z.Locked.Outputs {
								delete(z.Locked.Outputs, key)
							}
						}
						for zb0006 > 0 {
							zb0006--
							var za0003 string
							var za0004 WalletLockedOutput
							za0003, err = dc.ReadString()
							if err != nil {
								return
							}
							var zb0007 uint32
							zb0007, err = dc.ReadMapHeader()
							if err != nil {
								return
							}
							for zb0007 > 0 {
								zb0007--
								field, err = dc.ReadMapKeyPtr()
								if err != nil {
									return
								}
								switch msgp.UnsafeString(field) {
								case "a":
									err = za0004.Amount.DecodeMsg(dc)
									if err != nil {
										return
									}
								case "lu":
									err = za0004.LockedUntil.DecodeMsg(dc)
									if err != nil {
										return
									}
								case "d":
									za0004.Description, err = dc.ReadString()
									if err != nil {
										return
									}
								default:
									err = dc.Skip()
									if err != nil {
										return
									}
								}
							}
							z.Locked.Outputs[za0003] = za0004
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EncodableWalletBalance) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "u"
	err = en.Append(0x82, 0xa1, 0x75)
	if err != nil {
		return
	}
	if z.Unlocked == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "t"
		err = en.Append(0x82, 0xa1, 0x74)
		if err != nil {
			return
		}
		err = z.Unlocked.Total.EncodeMsg(en)
		if err != nil {
			return
		}
		// write "o"
		err = en.Append(0xa1, 0x6f)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.Unlocked.Outputs)))
		if err != nil {
			return
		}
		for za0001, za0002 := range z.Unlocked.Outputs {
			err = en.WriteString(za0001)
			if err != nil {
				return
			}
			// map header, size 2
			// write "a"
			err = en.Append(0x82, 0xa1, 0x61)
			if err != nil {
				return
			}
			err = za0002.Amount.EncodeMsg(en)
			if err != nil {
				return
			}
			// write "d"
			err = en.Append(0xa1, 0x64)
			if err != nil {
				return
			}
			err = en.WriteString(za0002.Description)
			if err != nil {
				return
			}
		}
	}
	// write "l"
	err = en.Append(0xa1, 0x6c)
	if err != nil {
		return
	}
	if z.Locked == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "t"
		err = en.Append(0x82, 0xa1, 0x74)
		if err != nil {
			return
		}
		err = z.Locked.Total.EncodeMsg(en)
		if err != nil {
			return
		}
		// write "o"
		err = en.Append(0xa1, 0x6f)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.Locked.Outputs)))
		if err != nil {
			return
		}
		for za0003, za0004 := range z.Locked.Outputs {
			err = en.WriteString(za0003)
			if err != nil {
				return
			}
			// map header, size 3
			// write "a"
			err = en.Append(0x83, 0xa1, 0x61)
			if err != nil {
				return
			}
			err = za0004.Amount.EncodeMsg(en)
			if err != nil {
				return
			}
			// write "lu"
			err = en.Append(0xa2, 0x6c, 0x75)
			if err != nil {
				return
			}
			err = za0004.LockedUntil.EncodeMsg(en)
			if err != nil {
				return
			}
			// write "d"
			err = en.Append(0xa1, 0x64)
			if err != nil {
				return
			}
			err = en.WriteString(za0004.Description)
			if err != nil {
				return
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EncodableWalletBalance) Msgsize() (s int) {
	s = 1 + 2
	if z.Unlocked == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 2 + z.Unlocked.Total.Msgsize() + 2 + msgp.MapHeaderSize
		if z.Unlocked.Outputs != nil {
			for za0001, za0002 := range z.Unlocked.Outputs {
				_ = za0002
				s += msgp.StringPrefixSize + len(za0001) + 1 + 2 + za0002.Amount.Msgsize() + 2 + msgp.StringPrefixSize + len(za0002.Description)
			}
		}
	}
	s += 2
	if z.Locked == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 2 + z.Locked.Total.Msgsize() + 2 + msgp.MapHeaderSize
		if z.Locked.Outputs != nil {
			for za0003, za0004 := range z.Locked.Outputs {
				_ = za0004
				s += msgp.StringPrefixSize + len(za0003) + 1 + 2 + za0004.Amount.Msgsize() + 3 + za0004.LockedUntil.Msgsize() + 2 + msgp.StringPrefixSize + len(za0004.Description)
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *NetworkStats) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "cts":
			err = z.Timestamp.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "cbh":
			err = z.BlockHeight.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "txc":
			z.TransactionCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "cctxc":
			z.CoinCreationTransactionCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "ccdtxc":
			z.CoinCreatorDefinitionTransactionCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "vtxc":
			z.ValueTransactionCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "coc":
			z.CoinOutputCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "lcoc":
			z.LockedCoinOutputCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "cic":
			z.CoinInputCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "mpc":
			z.MinerPayoutCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "txfc":
			z.TransactionFeeCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "mpt":
			err = z.MinerPayouts.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "txft":
			err = z.TransactionFees.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "ct":
			err = z.Coins.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "lct":
			err = z.LockedCoins.DecodeMsg(dc)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *NetworkStats) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 15
	// write "cts"
	err = en.Append(0x8f, 0xa3, 0x63, 0x74, 0x73)
	if err != nil {
		return
	}
	err = z.Timestamp.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "cbh"
	err = en.Append(0xa3, 0x63, 0x62, 0x68)
	if err != nil {
		return
	}
	err = z.BlockHeight.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "txc"
	err = en.Append(0xa3, 0x74, 0x78, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.TransactionCount)
	if err != nil {
		return
	}
	// write "cctxc"
	err = en.Append(0xa5, 0x63, 0x63, 0x74, 0x78, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CoinCreationTransactionCount)
	if err != nil {
		return
	}
	// write "ccdtxc"
	err = en.Append(0xa6, 0x63, 0x63, 0x64, 0x74, 0x78, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CoinCreatorDefinitionTransactionCount)
	if err != nil {
		return
	}
	// write "vtxc"
	err = en.Append(0xa4, 0x76, 0x74, 0x78, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ValueTransactionCount)
	if err != nil {
		return
	}
	// write "coc"
	err = en.Append(0xa3, 0x63, 0x6f, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CoinOutputCount)
	if err != nil {
		return
	}
	// write "lcoc"
	err = en.Append(0xa4, 0x6c, 0x63, 0x6f, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.LockedCoinOutputCount)
	if err != nil {
		return
	}
	// write "cic"
	err = en.Append(0xa3, 0x63, 0x69, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CoinInputCount)
	if err != nil {
		return
	}
	// write "mpc"
	err = en.Append(0xa3, 0x6d, 0x70, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.MinerPayoutCount)
	if err != nil {
		return
	}
	// write "txfc"
	err = en.Append(0xa4, 0x74, 0x78, 0x66, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.TransactionFeeCount)
	if err != nil {
		return
	}
	// write "mpt"
	err = en.Append(0xa3, 0x6d, 0x70, 0x74)
	if err != nil {
		return
	}
	err = z.MinerPayouts.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "txft"
	err = en.Append(0xa4, 0x74, 0x78, 0x66, 0x74)
	if err != nil {
		return
	}
	err = z.TransactionFees.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "ct"
	err = en.Append(0xa2, 0x63, 0x74)
	if err != nil {
		return
	}
	err = z.Coins.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "lct"
	err = en.Append(0xa3, 0x6c, 0x63, 0x74)
	if err != nil {
		return
	}
	err = z.LockedCoins.EncodeMsg(en)
	if err != nil {
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *NetworkStats) Msgsize() (s int) {
	s = 1 + 4 + z.Timestamp.Msgsize() + 4 + z.BlockHeight.Msgsize() + 4 + msgp.Uint64Size + 6 + msgp.Uint64Size + 7 + msgp.Uint64Size + 5 + msgp.Uint64Size + 4 + msgp.Uint64Size + 5 + msgp.Uint64Size + 4 + msgp.Uint64Size + 4 + msgp.Uint64Size + 5 + msgp.Uint64Size + 4 + z.MinerPayouts.Msgsize() + 5 + z.TransactionFees.Msgsize() + 3 + z.Coins.Msgsize() + 4 + z.LockedCoins.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WalletLockedBalance) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			err = z.Total.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "o":
			err = z.Outputs.DecodeMsg(dc)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WalletLockedBalance) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "t"
	err = en.Append(0x82, 0xa1, 0x74)
	if err != nil {
		return
	}
	err = z.Total.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "o"
	err = en.Append(0xa1, 0x6f)
	if err != nil {
		return
	}
	err = z.Outputs.EncodeMsg(en)
	if err != nil {
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WalletLockedBalance) Msgsize() (s int) {
	s = 1 + 2 + z.Total.Msgsize() + 2 + z.Outputs.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WalletLockedOutput) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			err = z.Amount.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "lu":
			err = z.LockedUntil.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "d":
			z.Description, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WalletLockedOutput) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "a"
	err = en.Append(0x83, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = z.Amount.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "lu"
	err = en.Append(0xa2, 0x6c, 0x75)
	if err != nil {
		return
	}
	err = z.LockedUntil.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WalletLockedOutput) Msgsize() (s int) {
	s = 1 + 2 + z.Amount.Msgsize() + 3 + z.LockedUntil.Msgsize() + 2 + msgp.StringPrefixSize + len(z.Description)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WalletLockedOutputMap) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	if (*z) == nil {
		(*z) = make(WalletLockedOutputMap, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 WalletLockedOutput
		zb0001, err = dc.ReadString()
		if err != nil {
			return
		}
		var field []byte
		_ = field
		var zb0004 uint32
		zb0004, err = dc.ReadMapHeader()
		if err != nil {
			return
		}
		for zb0004 > 0 {
			zb0004--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			switch msgp.UnsafeString(field) {
			case "a":
				err = zb0002.Amount.DecodeMsg(dc)
				if err != nil {
					return
				}
			case "lu":
				err = zb0002.LockedUntil.DecodeMsg(dc)
				if err != nil {
					return
				}
			case "d":
				zb0002.Description, err = dc.ReadString()
				if err != nil {
					return
				}
			default:
				err = dc.Skip()
				if err != nil {
					return
				}
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z WalletLockedOutputMap) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		return
	}
	for zb0005, zb0006 := range z {
		err = en.WriteString(zb0005)
		if err != nil {
			return
		}
		// map header, size 3
		// write "a"
		err = en.Append(0x83, 0xa1, 0x61)
		if err != nil {
			return
		}
		err = zb0006.Amount.EncodeMsg(en)
		if err != nil {
			return
		}
		// write "lu"
		err = en.Append(0xa2, 0x6c, 0x75)
		if err != nil {
			return
		}
		err = zb0006.LockedUntil.EncodeMsg(en)
		if err != nil {
			return
		}
		// write "d"
		err = en.Append(0xa1, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(zb0006.Description)
		if err != nil {
			return
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z WalletLockedOutputMap) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0005, zb0006 := range z {
			_ = zb0006
			s += msgp.StringPrefixSize + len(zb0005) + 1 + 2 + zb0006.Amount.Msgsize() + 3 + zb0006.LockedUntil.Msgsize() + 2 + msgp.StringPrefixSize + len(zb0006.Description)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WalletMultiSignData) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "o":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Owners) >= int(zb0002) {
				z.Owners = (z.Owners)[:zb0002]
			} else {
				z.Owners = make([]UnlockHash, zb0002)
			}
			for za0001 := range z.Owners {
				err = z.Owners[za0001].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "sr":
			z.SignaturesRequired, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WalletMultiSignData) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "o"
	err = en.Append(0x82, 0xa1, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Owners)))
	if err != nil {
		return
	}
	for za0001 := range z.Owners {
		err = z.Owners[za0001].EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "sr"
	err = en.Append(0xa2, 0x73, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.SignaturesRequired)
	if err != nil {
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WalletMultiSignData) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Owners {
		s += z.Owners[za0001].Msgsize()
	}
	s += 3 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WalletUnlockedBalance) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			err = z.Total.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "o":
			err = z.Outputs.DecodeMsg(dc)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WalletUnlockedBalance) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "t"
	err = en.Append(0x82, 0xa1, 0x74)
	if err != nil {
		return
	}
	err = z.Total.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "o"
	err = en.Append(0xa1, 0x6f)
	if err != nil {
		return
	}
	err = z.Outputs.EncodeMsg(en)
	if err != nil {
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WalletUnlockedBalance) Msgsize() (s int) {
	s = 1 + 2 + z.Total.Msgsize() + 2 + z.Outputs.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WalletUnlockedOutput) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			err = z.Amount.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "d":
			z.Description, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WalletUnlockedOutput) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "a"
	err = en.Append(0x82, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = z.Amount.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WalletUnlockedOutput) Msgsize() (s int) {
	s = 1 + 2 + z.Amount.Msgsize() + 2 + msgp.StringPrefixSize + len(z.Description)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WalletUnlockedOutputMap) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	if (*z) == nil {
		(*z) = make(WalletUnlockedOutputMap, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 WalletUnlockedOutput
		zb0001, err = dc.ReadString()
		if err != nil {
			return
		}
		var field []byte
		_ = field
		var zb0004 uint32
		zb0004, err = dc.ReadMapHeader()
		if err != nil {
			return
		}
		for zb0004 > 0 {
			zb0004--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			switch msgp.UnsafeString(field) {
			case "a":
				err = zb0002.Amount.DecodeMsg(dc)
				if err != nil {
					return
				}
			case "d":
				zb0002.Description, err = dc.ReadString()
				if err != nil {
					return
				}
			default:
				err = dc.Skip()
				if err != nil {
					return
				}
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z WalletUnlockedOutputMap) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		return
	}
	for zb0005, zb0006 := range z {
		err = en.WriteString(zb0005)
		if err != nil {
			return
		}
		// map header, size 2
		// write "a"
		err = en.Append(0x82, 0xa1, 0x61)
		if err != nil {
			return
		}
		err = zb0006.Amount.EncodeMsg(en)
		if err != nil {
			return
		}
		// write "d"
		err = en.Append(0xa1, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(zb0006.Description)
		if err != nil {
			return
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z WalletUnlockedOutputMap) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0005, zb0006 := range z {
			_ = zb0006
			s += msgp.StringPrefixSize + len(zb0005) + 1 + 2 + zb0006.Amount.Msgsize() + 2 + msgp.StringPrefixSize + len(zb0006.Description)
		}
	}
	return
}
