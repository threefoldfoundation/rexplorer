// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package types

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *EncodableWallet) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields2zgensym_43f95b0a7bb52c4a_3 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields2zgensym_43f95b0a7bb52c4a_3 uint32
	totalEncodedFields2zgensym_43f95b0a7bb52c4a_3, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft2zgensym_43f95b0a7bb52c4a_3 := totalEncodedFields2zgensym_43f95b0a7bb52c4a_3
	missingFieldsLeft2zgensym_43f95b0a7bb52c4a_3 := maxFields2zgensym_43f95b0a7bb52c4a_3 - totalEncodedFields2zgensym_43f95b0a7bb52c4a_3

	var nextMiss2zgensym_43f95b0a7bb52c4a_3 int32 = -1
	var found2zgensym_43f95b0a7bb52c4a_3 [maxFields2zgensym_43f95b0a7bb52c4a_3]bool
	var curField2zgensym_43f95b0a7bb52c4a_3 string

doneWithStruct2zgensym_43f95b0a7bb52c4a_3:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft2zgensym_43f95b0a7bb52c4a_3 > 0 || missingFieldsLeft2zgensym_43f95b0a7bb52c4a_3 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft2zgensym_43f95b0a7bb52c4a_3, missingFieldsLeft2zgensym_43f95b0a7bb52c4a_3, msgp.ShowFound(found2zgensym_43f95b0a7bb52c4a_3[:]), decodeMsgFieldOrder2zgensym_43f95b0a7bb52c4a_3)
		if encodedFieldsLeft2zgensym_43f95b0a7bb52c4a_3 > 0 {
			encodedFieldsLeft2zgensym_43f95b0a7bb52c4a_3--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField2zgensym_43f95b0a7bb52c4a_3 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss2zgensym_43f95b0a7bb52c4a_3 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss2zgensym_43f95b0a7bb52c4a_3 = 0
			}
			for nextMiss2zgensym_43f95b0a7bb52c4a_3 < maxFields2zgensym_43f95b0a7bb52c4a_3 && (found2zgensym_43f95b0a7bb52c4a_3[nextMiss2zgensym_43f95b0a7bb52c4a_3] || decodeMsgFieldSkip2zgensym_43f95b0a7bb52c4a_3[nextMiss2zgensym_43f95b0a7bb52c4a_3]) {
				nextMiss2zgensym_43f95b0a7bb52c4a_3++
			}
			if nextMiss2zgensym_43f95b0a7bb52c4a_3 == maxFields2zgensym_43f95b0a7bb52c4a_3 {
				// filled all the empty fields!
				break doneWithStruct2zgensym_43f95b0a7bb52c4a_3
			}
			missingFieldsLeft2zgensym_43f95b0a7bb52c4a_3--
			curField2zgensym_43f95b0a7bb52c4a_3 = decodeMsgFieldOrder2zgensym_43f95b0a7bb52c4a_3[nextMiss2zgensym_43f95b0a7bb52c4a_3]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField2zgensym_43f95b0a7bb52c4a_3)
		switch curField2zgensym_43f95b0a7bb52c4a_3 {
		// -- templateDecodeMsg ends here --

		case "b":
			found2zgensym_43f95b0a7bb52c4a_3[0] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Balance != nil {
					dc.PushAlwaysNil()
					err = z.Balance.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Balance == nil {
					z.Balance = new(EncodableWalletBalance)
				}
				dc.DedupIndexEachPtr(z.Balance)

				err = z.Balance.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "ma":
			found2zgensym_43f95b0a7bb52c4a_3[1] = true
			var zgensym_43f95b0a7bb52c4a_4 uint32
			zgensym_43f95b0a7bb52c4a_4, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.MultiSignAddresses) >= int(zgensym_43f95b0a7bb52c4a_4) {
				z.MultiSignAddresses = (z.MultiSignAddresses)[:zgensym_43f95b0a7bb52c4a_4]
			} else {
				z.MultiSignAddresses = make([]UnlockHash, zgensym_43f95b0a7bb52c4a_4)
			}
			for zgensym_43f95b0a7bb52c4a_0 := range z.MultiSignAddresses {
				err = z.MultiSignAddresses[zgensym_43f95b0a7bb52c4a_0].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "m":
			found2zgensym_43f95b0a7bb52c4a_3[2] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				z.MultiSignData = nil
			} else if kptr, dup := dc.DedupReadIsDup("z.MultiSignData", "*WalletMultiSignData"); dup {
				z.MultiSignData = kptr.(*WalletMultiSignData)
			} else {
				if z.MultiSignData == nil {
					z.MultiSignData = new(WalletMultiSignData)
				}
				dc.DedupIndexEachPtr(z.MultiSignData)

				const maxFields5zgensym_43f95b0a7bb52c4a_6 = 2

				// -- templateDecodeMsg starts here--
				var totalEncodedFields5zgensym_43f95b0a7bb52c4a_6 uint32
				totalEncodedFields5zgensym_43f95b0a7bb52c4a_6, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				encodedFieldsLeft5zgensym_43f95b0a7bb52c4a_6 := totalEncodedFields5zgensym_43f95b0a7bb52c4a_6
				missingFieldsLeft5zgensym_43f95b0a7bb52c4a_6 := maxFields5zgensym_43f95b0a7bb52c4a_6 - totalEncodedFields5zgensym_43f95b0a7bb52c4a_6

				var nextMiss5zgensym_43f95b0a7bb52c4a_6 int32 = -1
				var found5zgensym_43f95b0a7bb52c4a_6 [maxFields5zgensym_43f95b0a7bb52c4a_6]bool
				var curField5zgensym_43f95b0a7bb52c4a_6 string

			doneWithStruct5zgensym_43f95b0a7bb52c4a_6:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft5zgensym_43f95b0a7bb52c4a_6 > 0 || missingFieldsLeft5zgensym_43f95b0a7bb52c4a_6 > 0 {
					//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft5zgensym_43f95b0a7bb52c4a_6, missingFieldsLeft5zgensym_43f95b0a7bb52c4a_6, msgp.ShowFound(found5zgensym_43f95b0a7bb52c4a_6[:]), decodeMsgFieldOrder5zgensym_43f95b0a7bb52c4a_6)
					if encodedFieldsLeft5zgensym_43f95b0a7bb52c4a_6 > 0 {
						encodedFieldsLeft5zgensym_43f95b0a7bb52c4a_6--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							return
						}
						curField5zgensym_43f95b0a7bb52c4a_6 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss5zgensym_43f95b0a7bb52c4a_6 < 0 {
							// tell the reader to only give us Nils
							// until further notice.
							dc.PushAlwaysNil()
							nextMiss5zgensym_43f95b0a7bb52c4a_6 = 0
						}
						for nextMiss5zgensym_43f95b0a7bb52c4a_6 < maxFields5zgensym_43f95b0a7bb52c4a_6 && (found5zgensym_43f95b0a7bb52c4a_6[nextMiss5zgensym_43f95b0a7bb52c4a_6] || decodeMsgFieldSkip5zgensym_43f95b0a7bb52c4a_6[nextMiss5zgensym_43f95b0a7bb52c4a_6]) {
							nextMiss5zgensym_43f95b0a7bb52c4a_6++
						}
						if nextMiss5zgensym_43f95b0a7bb52c4a_6 == maxFields5zgensym_43f95b0a7bb52c4a_6 {
							// filled all the empty fields!
							break doneWithStruct5zgensym_43f95b0a7bb52c4a_6
						}
						missingFieldsLeft5zgensym_43f95b0a7bb52c4a_6--
						curField5zgensym_43f95b0a7bb52c4a_6 = decodeMsgFieldOrder5zgensym_43f95b0a7bb52c4a_6[nextMiss5zgensym_43f95b0a7bb52c4a_6]
					}
					//fmt.Printf("switching on curField: '%v'\n", curField5zgensym_43f95b0a7bb52c4a_6)
					switch curField5zgensym_43f95b0a7bb52c4a_6 {
					// -- templateDecodeMsg ends here --

					case "o":
						found5zgensym_43f95b0a7bb52c4a_6[0] = true
						var zgensym_43f95b0a7bb52c4a_7 uint32
						zgensym_43f95b0a7bb52c4a_7, err = dc.ReadArrayHeader()
						if err != nil {
							return
						}
						if cap(z.MultiSignData.Owners) >= int(zgensym_43f95b0a7bb52c4a_7) {
							z.MultiSignData.Owners = (z.MultiSignData.Owners)[:zgensym_43f95b0a7bb52c4a_7]
						} else {
							z.MultiSignData.Owners = make([]UnlockHash, zgensym_43f95b0a7bb52c4a_7)
						}
						for zgensym_43f95b0a7bb52c4a_1 := range z.MultiSignData.Owners {
							err = z.MultiSignData.Owners[zgensym_43f95b0a7bb52c4a_1].DecodeMsg(dc)
							if err != nil {
								return
							}
						}
					case "sr":
						found5zgensym_43f95b0a7bb52c4a_6[1] = true
						z.MultiSignData.SignaturesRequired, err = dc.ReadUint64()
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
				if nextMiss5zgensym_43f95b0a7bb52c4a_6 != -1 {
					dc.PopAlwaysNil()
				}

			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss2zgensym_43f95b0a7bb52c4a_3 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of EncodableWallet
var decodeMsgFieldOrder2zgensym_43f95b0a7bb52c4a_3 = []string{"b", "ma", "m"}

var decodeMsgFieldSkip2zgensym_43f95b0a7bb52c4a_3 = []bool{false, false, false}

// fields of WalletMultiSignData
var decodeMsgFieldOrder5zgensym_43f95b0a7bb52c4a_6 = []string{"o", "sr"}

var decodeMsgFieldSkip5zgensym_43f95b0a7bb52c4a_6 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *EncodableWallet) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (z.Balance == nil) // pointer, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.MultiSignAddresses) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.MultiSignData == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *EncodableWallet) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_43f95b0a7bb52c4a_8 [3]bool
	fieldsInUse_zgensym_43f95b0a7bb52c4a_9 := z.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'EncodableWallet'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x45, 0x6e, 0x63, 0x6f, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_43f95b0a7bb52c4a_8[0] {
		// write "b"
		err = en.Append(0xa1, 0x62)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Balance == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Balance)
			if err != nil {
				return
			}
			if !dup {
				err = z.Balance.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_8[1] {
		// write "ma"
		err = en.Append(0xa2, 0x6d, 0x61)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.MultiSignAddresses)))
		if err != nil {
			return
		}
		for zgensym_43f95b0a7bb52c4a_0 := range z.MultiSignAddresses {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.MultiSignAddresses[zgensym_43f95b0a7bb52c4a_0])
			if err != nil {
				return
			}
			if !dup {
				err = z.MultiSignAddresses[zgensym_43f95b0a7bb52c4a_0].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_8[2] {
		// write "m"
		err = en.Append(0xa1, 0x6d)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.MultiSignData == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// record the pointer for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.MultiSignData)
			if err != nil {
				return
			}
			if !dup {

				// honor the omitempty tags
				var empty_zgensym_43f95b0a7bb52c4a_10 [2]bool
				fieldsInUse_zgensym_43f95b0a7bb52c4a_11 := z.MultiSignData.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_10[:])

				// map header
				err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_11 + 1)
				if err != nil {
					return err
				}

				// runtime struct type identification for 'WalletMultiSignData'
				err = en.Append(0xa1, 0x40)
				if err != nil {
					return err
				}
				err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61})
				if err != nil {
					return err
				}

				if !empty_zgensym_43f95b0a7bb52c4a_10[0] {
					// write "o"
					err = en.Append(0xa1, 0x6f)
					if err != nil {
						return err
					}
					err = en.WriteArrayHeader(uint32(len(z.MultiSignData.Owners)))
					if err != nil {
						return
					}
					for zgensym_43f95b0a7bb52c4a_1 := range z.MultiSignData.Owners {
						// encodeGen.gBase IDENT

						// record the interface for deduplication
						var dup bool
						dup, err = en.DedupWriteIsDup(z.MultiSignData.Owners[zgensym_43f95b0a7bb52c4a_1])
						if err != nil {
							return
						}
						if !dup {
							err = z.MultiSignData.Owners[zgensym_43f95b0a7bb52c4a_1].EncodeMsg(en)
							if err != nil {
								return
							}
						}
					}
				}

				if !empty_zgensym_43f95b0a7bb52c4a_10[1] {
					// write "sr"
					err = en.Append(0xa2, 0x73, 0x72)
					if err != nil {
						return err
					}
					err = en.WriteUint64(z.MultiSignData.SignaturesRequired)
					if err != nil {
						return
					}
				}

			}
		}
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EncodableWallet) Msgsize() (s int) {
	s = 1 + 2
	if z.Balance == nil {
		s += msgp.NilSize
	} else {
		s += z.Balance.Msgsize()
	}
	s += 3 + msgp.ArrayHeaderSize
	for zgensym_43f95b0a7bb52c4a_0 := range z.MultiSignAddresses {
		s += z.MultiSignAddresses[zgensym_43f95b0a7bb52c4a_0].Msgsize()
	}
	s += 2
	if z.MultiSignData == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 2 + msgp.ArrayHeaderSize
		for zgensym_43f95b0a7bb52c4a_1 := range z.MultiSignData.Owners {
			s += z.MultiSignData.Owners[zgensym_43f95b0a7bb52c4a_1].Msgsize()
		}
		s += 3 + msgp.Uint64Size
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *EncodableWalletBalance) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields16zgensym_43f95b0a7bb52c4a_17 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields16zgensym_43f95b0a7bb52c4a_17 uint32
	totalEncodedFields16zgensym_43f95b0a7bb52c4a_17, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft16zgensym_43f95b0a7bb52c4a_17 := totalEncodedFields16zgensym_43f95b0a7bb52c4a_17
	missingFieldsLeft16zgensym_43f95b0a7bb52c4a_17 := maxFields16zgensym_43f95b0a7bb52c4a_17 - totalEncodedFields16zgensym_43f95b0a7bb52c4a_17

	var nextMiss16zgensym_43f95b0a7bb52c4a_17 int32 = -1
	var found16zgensym_43f95b0a7bb52c4a_17 [maxFields16zgensym_43f95b0a7bb52c4a_17]bool
	var curField16zgensym_43f95b0a7bb52c4a_17 string

doneWithStruct16zgensym_43f95b0a7bb52c4a_17:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft16zgensym_43f95b0a7bb52c4a_17 > 0 || missingFieldsLeft16zgensym_43f95b0a7bb52c4a_17 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft16zgensym_43f95b0a7bb52c4a_17, missingFieldsLeft16zgensym_43f95b0a7bb52c4a_17, msgp.ShowFound(found16zgensym_43f95b0a7bb52c4a_17[:]), decodeMsgFieldOrder16zgensym_43f95b0a7bb52c4a_17)
		if encodedFieldsLeft16zgensym_43f95b0a7bb52c4a_17 > 0 {
			encodedFieldsLeft16zgensym_43f95b0a7bb52c4a_17--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField16zgensym_43f95b0a7bb52c4a_17 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss16zgensym_43f95b0a7bb52c4a_17 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss16zgensym_43f95b0a7bb52c4a_17 = 0
			}
			for nextMiss16zgensym_43f95b0a7bb52c4a_17 < maxFields16zgensym_43f95b0a7bb52c4a_17 && (found16zgensym_43f95b0a7bb52c4a_17[nextMiss16zgensym_43f95b0a7bb52c4a_17] || decodeMsgFieldSkip16zgensym_43f95b0a7bb52c4a_17[nextMiss16zgensym_43f95b0a7bb52c4a_17]) {
				nextMiss16zgensym_43f95b0a7bb52c4a_17++
			}
			if nextMiss16zgensym_43f95b0a7bb52c4a_17 == maxFields16zgensym_43f95b0a7bb52c4a_17 {
				// filled all the empty fields!
				break doneWithStruct16zgensym_43f95b0a7bb52c4a_17
			}
			missingFieldsLeft16zgensym_43f95b0a7bb52c4a_17--
			curField16zgensym_43f95b0a7bb52c4a_17 = decodeMsgFieldOrder16zgensym_43f95b0a7bb52c4a_17[nextMiss16zgensym_43f95b0a7bb52c4a_17]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField16zgensym_43f95b0a7bb52c4a_17)
		switch curField16zgensym_43f95b0a7bb52c4a_17 {
		// -- templateDecodeMsg ends here --

		case "u":
			found16zgensym_43f95b0a7bb52c4a_17[0] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				z.Unlocked = nil
			} else if kptr, dup := dc.DedupReadIsDup("z.Unlocked", "*WalletUnlockedBalance"); dup {
				z.Unlocked = kptr.(*WalletUnlockedBalance)
			} else {
				if z.Unlocked == nil {
					z.Unlocked = new(WalletUnlockedBalance)
				}
				dc.DedupIndexEachPtr(z.Unlocked)

				const maxFields18zgensym_43f95b0a7bb52c4a_19 = 2

				// -- templateDecodeMsg starts here--
				var totalEncodedFields18zgensym_43f95b0a7bb52c4a_19 uint32
				totalEncodedFields18zgensym_43f95b0a7bb52c4a_19, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				encodedFieldsLeft18zgensym_43f95b0a7bb52c4a_19 := totalEncodedFields18zgensym_43f95b0a7bb52c4a_19
				missingFieldsLeft18zgensym_43f95b0a7bb52c4a_19 := maxFields18zgensym_43f95b0a7bb52c4a_19 - totalEncodedFields18zgensym_43f95b0a7bb52c4a_19

				var nextMiss18zgensym_43f95b0a7bb52c4a_19 int32 = -1
				var found18zgensym_43f95b0a7bb52c4a_19 [maxFields18zgensym_43f95b0a7bb52c4a_19]bool
				var curField18zgensym_43f95b0a7bb52c4a_19 string

			doneWithStruct18zgensym_43f95b0a7bb52c4a_19:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft18zgensym_43f95b0a7bb52c4a_19 > 0 || missingFieldsLeft18zgensym_43f95b0a7bb52c4a_19 > 0 {
					//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft18zgensym_43f95b0a7bb52c4a_19, missingFieldsLeft18zgensym_43f95b0a7bb52c4a_19, msgp.ShowFound(found18zgensym_43f95b0a7bb52c4a_19[:]), decodeMsgFieldOrder18zgensym_43f95b0a7bb52c4a_19)
					if encodedFieldsLeft18zgensym_43f95b0a7bb52c4a_19 > 0 {
						encodedFieldsLeft18zgensym_43f95b0a7bb52c4a_19--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							return
						}
						curField18zgensym_43f95b0a7bb52c4a_19 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss18zgensym_43f95b0a7bb52c4a_19 < 0 {
							// tell the reader to only give us Nils
							// until further notice.
							dc.PushAlwaysNil()
							nextMiss18zgensym_43f95b0a7bb52c4a_19 = 0
						}
						for nextMiss18zgensym_43f95b0a7bb52c4a_19 < maxFields18zgensym_43f95b0a7bb52c4a_19 && (found18zgensym_43f95b0a7bb52c4a_19[nextMiss18zgensym_43f95b0a7bb52c4a_19] || decodeMsgFieldSkip18zgensym_43f95b0a7bb52c4a_19[nextMiss18zgensym_43f95b0a7bb52c4a_19]) {
							nextMiss18zgensym_43f95b0a7bb52c4a_19++
						}
						if nextMiss18zgensym_43f95b0a7bb52c4a_19 == maxFields18zgensym_43f95b0a7bb52c4a_19 {
							// filled all the empty fields!
							break doneWithStruct18zgensym_43f95b0a7bb52c4a_19
						}
						missingFieldsLeft18zgensym_43f95b0a7bb52c4a_19--
						curField18zgensym_43f95b0a7bb52c4a_19 = decodeMsgFieldOrder18zgensym_43f95b0a7bb52c4a_19[nextMiss18zgensym_43f95b0a7bb52c4a_19]
					}
					//fmt.Printf("switching on curField: '%v'\n", curField18zgensym_43f95b0a7bb52c4a_19)
					switch curField18zgensym_43f95b0a7bb52c4a_19 {
					// -- templateDecodeMsg ends here --

					case "t":
						found18zgensym_43f95b0a7bb52c4a_19[0] = true
						err = z.Unlocked.Total.DecodeMsg(dc)
						if err != nil {
							return
						}
					case "o":
						found18zgensym_43f95b0a7bb52c4a_19[1] = true
						var zgensym_43f95b0a7bb52c4a_20 uint32
						zgensym_43f95b0a7bb52c4a_20, err = dc.ReadMapHeader()
						if err != nil {
							return
						}
						if z.Unlocked.Outputs == nil && zgensym_43f95b0a7bb52c4a_20 > 0 {
							z.Unlocked.Outputs = make(WalletUnlockedOutputMap, zgensym_43f95b0a7bb52c4a_20)
						} else if len(z.Unlocked.Outputs) > 0 {
							for key, _ := range z.Unlocked.Outputs {
								delete(z.Unlocked.Outputs, key)
							}
						}
						for zgensym_43f95b0a7bb52c4a_20 > 0 {
							zgensym_43f95b0a7bb52c4a_20--
							var zgensym_43f95b0a7bb52c4a_12 string
							var zgensym_43f95b0a7bb52c4a_13 WalletUnlockedOutput
							zgensym_43f95b0a7bb52c4a_12, err = dc.ReadString()
							if err != nil {
								return
							}
							const maxFields21zgensym_43f95b0a7bb52c4a_22 = 2

							// -- templateDecodeMsg starts here--
							var totalEncodedFields21zgensym_43f95b0a7bb52c4a_22 uint32
							totalEncodedFields21zgensym_43f95b0a7bb52c4a_22, err = dc.ReadMapHeader()
							if err != nil {
								return
							}
							encodedFieldsLeft21zgensym_43f95b0a7bb52c4a_22 := totalEncodedFields21zgensym_43f95b0a7bb52c4a_22
							missingFieldsLeft21zgensym_43f95b0a7bb52c4a_22 := maxFields21zgensym_43f95b0a7bb52c4a_22 - totalEncodedFields21zgensym_43f95b0a7bb52c4a_22

							var nextMiss21zgensym_43f95b0a7bb52c4a_22 int32 = -1
							var found21zgensym_43f95b0a7bb52c4a_22 [maxFields21zgensym_43f95b0a7bb52c4a_22]bool
							var curField21zgensym_43f95b0a7bb52c4a_22 string

						doneWithStruct21zgensym_43f95b0a7bb52c4a_22:
							// First fill all the encoded fields, then
							// treat the remaining, missing fields, as Nil.
							for encodedFieldsLeft21zgensym_43f95b0a7bb52c4a_22 > 0 || missingFieldsLeft21zgensym_43f95b0a7bb52c4a_22 > 0 {
								//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft21zgensym_43f95b0a7bb52c4a_22, missingFieldsLeft21zgensym_43f95b0a7bb52c4a_22, msgp.ShowFound(found21zgensym_43f95b0a7bb52c4a_22[:]), decodeMsgFieldOrder21zgensym_43f95b0a7bb52c4a_22)
								if encodedFieldsLeft21zgensym_43f95b0a7bb52c4a_22 > 0 {
									encodedFieldsLeft21zgensym_43f95b0a7bb52c4a_22--
									field, err = dc.ReadMapKeyPtr()
									if err != nil {
										return
									}
									curField21zgensym_43f95b0a7bb52c4a_22 = msgp.UnsafeString(field)
								} else {
									//missing fields need handling
									if nextMiss21zgensym_43f95b0a7bb52c4a_22 < 0 {
										// tell the reader to only give us Nils
										// until further notice.
										dc.PushAlwaysNil()
										nextMiss21zgensym_43f95b0a7bb52c4a_22 = 0
									}
									for nextMiss21zgensym_43f95b0a7bb52c4a_22 < maxFields21zgensym_43f95b0a7bb52c4a_22 && (found21zgensym_43f95b0a7bb52c4a_22[nextMiss21zgensym_43f95b0a7bb52c4a_22] || decodeMsgFieldSkip21zgensym_43f95b0a7bb52c4a_22[nextMiss21zgensym_43f95b0a7bb52c4a_22]) {
										nextMiss21zgensym_43f95b0a7bb52c4a_22++
									}
									if nextMiss21zgensym_43f95b0a7bb52c4a_22 == maxFields21zgensym_43f95b0a7bb52c4a_22 {
										// filled all the empty fields!
										break doneWithStruct21zgensym_43f95b0a7bb52c4a_22
									}
									missingFieldsLeft21zgensym_43f95b0a7bb52c4a_22--
									curField21zgensym_43f95b0a7bb52c4a_22 = decodeMsgFieldOrder21zgensym_43f95b0a7bb52c4a_22[nextMiss21zgensym_43f95b0a7bb52c4a_22]
								}
								//fmt.Printf("switching on curField: '%v'\n", curField21zgensym_43f95b0a7bb52c4a_22)
								switch curField21zgensym_43f95b0a7bb52c4a_22 {
								// -- templateDecodeMsg ends here --

								case "a":
									found21zgensym_43f95b0a7bb52c4a_22[0] = true
									err = zgensym_43f95b0a7bb52c4a_13.Amount.DecodeMsg(dc)
									if err != nil {
										return
									}
								case "d":
									found21zgensym_43f95b0a7bb52c4a_22[1] = true
									zgensym_43f95b0a7bb52c4a_13.Description, err = dc.ReadString()
									if err != nil {
										return
									}
								default:
									err = dc.Skip()
									if err != nil {
										return
									}
								}
							}
							if nextMiss21zgensym_43f95b0a7bb52c4a_22 != -1 {
								dc.PopAlwaysNil()
							}

							z.Unlocked.Outputs[zgensym_43f95b0a7bb52c4a_12] = zgensym_43f95b0a7bb52c4a_13
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
				if nextMiss18zgensym_43f95b0a7bb52c4a_19 != -1 {
					dc.PopAlwaysNil()
				}

			}
		case "l":
			found16zgensym_43f95b0a7bb52c4a_17[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				z.Locked = nil
			} else if kptr, dup := dc.DedupReadIsDup("z.Locked", "*WalletLockedBalance"); dup {
				z.Locked = kptr.(*WalletLockedBalance)
			} else {
				if z.Locked == nil {
					z.Locked = new(WalletLockedBalance)
				}
				dc.DedupIndexEachPtr(z.Locked)

				const maxFields23zgensym_43f95b0a7bb52c4a_24 = 2

				// -- templateDecodeMsg starts here--
				var totalEncodedFields23zgensym_43f95b0a7bb52c4a_24 uint32
				totalEncodedFields23zgensym_43f95b0a7bb52c4a_24, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				encodedFieldsLeft23zgensym_43f95b0a7bb52c4a_24 := totalEncodedFields23zgensym_43f95b0a7bb52c4a_24
				missingFieldsLeft23zgensym_43f95b0a7bb52c4a_24 := maxFields23zgensym_43f95b0a7bb52c4a_24 - totalEncodedFields23zgensym_43f95b0a7bb52c4a_24

				var nextMiss23zgensym_43f95b0a7bb52c4a_24 int32 = -1
				var found23zgensym_43f95b0a7bb52c4a_24 [maxFields23zgensym_43f95b0a7bb52c4a_24]bool
				var curField23zgensym_43f95b0a7bb52c4a_24 string

			doneWithStruct23zgensym_43f95b0a7bb52c4a_24:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft23zgensym_43f95b0a7bb52c4a_24 > 0 || missingFieldsLeft23zgensym_43f95b0a7bb52c4a_24 > 0 {
					//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft23zgensym_43f95b0a7bb52c4a_24, missingFieldsLeft23zgensym_43f95b0a7bb52c4a_24, msgp.ShowFound(found23zgensym_43f95b0a7bb52c4a_24[:]), decodeMsgFieldOrder23zgensym_43f95b0a7bb52c4a_24)
					if encodedFieldsLeft23zgensym_43f95b0a7bb52c4a_24 > 0 {
						encodedFieldsLeft23zgensym_43f95b0a7bb52c4a_24--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							return
						}
						curField23zgensym_43f95b0a7bb52c4a_24 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss23zgensym_43f95b0a7bb52c4a_24 < 0 {
							// tell the reader to only give us Nils
							// until further notice.
							dc.PushAlwaysNil()
							nextMiss23zgensym_43f95b0a7bb52c4a_24 = 0
						}
						for nextMiss23zgensym_43f95b0a7bb52c4a_24 < maxFields23zgensym_43f95b0a7bb52c4a_24 && (found23zgensym_43f95b0a7bb52c4a_24[nextMiss23zgensym_43f95b0a7bb52c4a_24] || decodeMsgFieldSkip23zgensym_43f95b0a7bb52c4a_24[nextMiss23zgensym_43f95b0a7bb52c4a_24]) {
							nextMiss23zgensym_43f95b0a7bb52c4a_24++
						}
						if nextMiss23zgensym_43f95b0a7bb52c4a_24 == maxFields23zgensym_43f95b0a7bb52c4a_24 {
							// filled all the empty fields!
							break doneWithStruct23zgensym_43f95b0a7bb52c4a_24
						}
						missingFieldsLeft23zgensym_43f95b0a7bb52c4a_24--
						curField23zgensym_43f95b0a7bb52c4a_24 = decodeMsgFieldOrder23zgensym_43f95b0a7bb52c4a_24[nextMiss23zgensym_43f95b0a7bb52c4a_24]
					}
					//fmt.Printf("switching on curField: '%v'\n", curField23zgensym_43f95b0a7bb52c4a_24)
					switch curField23zgensym_43f95b0a7bb52c4a_24 {
					// -- templateDecodeMsg ends here --

					case "t":
						found23zgensym_43f95b0a7bb52c4a_24[0] = true
						err = z.Locked.Total.DecodeMsg(dc)
						if err != nil {
							return
						}
					case "o":
						found23zgensym_43f95b0a7bb52c4a_24[1] = true
						var zgensym_43f95b0a7bb52c4a_25 uint32
						zgensym_43f95b0a7bb52c4a_25, err = dc.ReadMapHeader()
						if err != nil {
							return
						}
						if z.Locked.Outputs == nil && zgensym_43f95b0a7bb52c4a_25 > 0 {
							z.Locked.Outputs = make(WalletLockedOutputMap, zgensym_43f95b0a7bb52c4a_25)
						} else if len(z.Locked.Outputs) > 0 {
							for key, _ := range z.Locked.Outputs {
								delete(z.Locked.Outputs, key)
							}
						}
						for zgensym_43f95b0a7bb52c4a_25 > 0 {
							zgensym_43f95b0a7bb52c4a_25--
							var zgensym_43f95b0a7bb52c4a_14 string
							var zgensym_43f95b0a7bb52c4a_15 WalletLockedOutput
							zgensym_43f95b0a7bb52c4a_14, err = dc.ReadString()
							if err != nil {
								return
							}
							const maxFields26zgensym_43f95b0a7bb52c4a_27 = 3

							// -- templateDecodeMsg starts here--
							var totalEncodedFields26zgensym_43f95b0a7bb52c4a_27 uint32
							totalEncodedFields26zgensym_43f95b0a7bb52c4a_27, err = dc.ReadMapHeader()
							if err != nil {
								return
							}
							encodedFieldsLeft26zgensym_43f95b0a7bb52c4a_27 := totalEncodedFields26zgensym_43f95b0a7bb52c4a_27
							missingFieldsLeft26zgensym_43f95b0a7bb52c4a_27 := maxFields26zgensym_43f95b0a7bb52c4a_27 - totalEncodedFields26zgensym_43f95b0a7bb52c4a_27

							var nextMiss26zgensym_43f95b0a7bb52c4a_27 int32 = -1
							var found26zgensym_43f95b0a7bb52c4a_27 [maxFields26zgensym_43f95b0a7bb52c4a_27]bool
							var curField26zgensym_43f95b0a7bb52c4a_27 string

						doneWithStruct26zgensym_43f95b0a7bb52c4a_27:
							// First fill all the encoded fields, then
							// treat the remaining, missing fields, as Nil.
							for encodedFieldsLeft26zgensym_43f95b0a7bb52c4a_27 > 0 || missingFieldsLeft26zgensym_43f95b0a7bb52c4a_27 > 0 {
								//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft26zgensym_43f95b0a7bb52c4a_27, missingFieldsLeft26zgensym_43f95b0a7bb52c4a_27, msgp.ShowFound(found26zgensym_43f95b0a7bb52c4a_27[:]), decodeMsgFieldOrder26zgensym_43f95b0a7bb52c4a_27)
								if encodedFieldsLeft26zgensym_43f95b0a7bb52c4a_27 > 0 {
									encodedFieldsLeft26zgensym_43f95b0a7bb52c4a_27--
									field, err = dc.ReadMapKeyPtr()
									if err != nil {
										return
									}
									curField26zgensym_43f95b0a7bb52c4a_27 = msgp.UnsafeString(field)
								} else {
									//missing fields need handling
									if nextMiss26zgensym_43f95b0a7bb52c4a_27 < 0 {
										// tell the reader to only give us Nils
										// until further notice.
										dc.PushAlwaysNil()
										nextMiss26zgensym_43f95b0a7bb52c4a_27 = 0
									}
									for nextMiss26zgensym_43f95b0a7bb52c4a_27 < maxFields26zgensym_43f95b0a7bb52c4a_27 && (found26zgensym_43f95b0a7bb52c4a_27[nextMiss26zgensym_43f95b0a7bb52c4a_27] || decodeMsgFieldSkip26zgensym_43f95b0a7bb52c4a_27[nextMiss26zgensym_43f95b0a7bb52c4a_27]) {
										nextMiss26zgensym_43f95b0a7bb52c4a_27++
									}
									if nextMiss26zgensym_43f95b0a7bb52c4a_27 == maxFields26zgensym_43f95b0a7bb52c4a_27 {
										// filled all the empty fields!
										break doneWithStruct26zgensym_43f95b0a7bb52c4a_27
									}
									missingFieldsLeft26zgensym_43f95b0a7bb52c4a_27--
									curField26zgensym_43f95b0a7bb52c4a_27 = decodeMsgFieldOrder26zgensym_43f95b0a7bb52c4a_27[nextMiss26zgensym_43f95b0a7bb52c4a_27]
								}
								//fmt.Printf("switching on curField: '%v'\n", curField26zgensym_43f95b0a7bb52c4a_27)
								switch curField26zgensym_43f95b0a7bb52c4a_27 {
								// -- templateDecodeMsg ends here --

								case "a":
									found26zgensym_43f95b0a7bb52c4a_27[0] = true
									err = zgensym_43f95b0a7bb52c4a_15.Amount.DecodeMsg(dc)
									if err != nil {
										return
									}
								case "lu":
									found26zgensym_43f95b0a7bb52c4a_27[1] = true
									err = zgensym_43f95b0a7bb52c4a_15.LockedUntil.DecodeMsg(dc)
									if err != nil {
										return
									}
								case "d":
									found26zgensym_43f95b0a7bb52c4a_27[2] = true
									zgensym_43f95b0a7bb52c4a_15.Description, err = dc.ReadString()
									if err != nil {
										return
									}
								default:
									err = dc.Skip()
									if err != nil {
										return
									}
								}
							}
							if nextMiss26zgensym_43f95b0a7bb52c4a_27 != -1 {
								dc.PopAlwaysNil()
							}

							z.Locked.Outputs[zgensym_43f95b0a7bb52c4a_14] = zgensym_43f95b0a7bb52c4a_15
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
				if nextMiss23zgensym_43f95b0a7bb52c4a_24 != -1 {
					dc.PopAlwaysNil()
				}

			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss16zgensym_43f95b0a7bb52c4a_17 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of EncodableWalletBalance
var decodeMsgFieldOrder16zgensym_43f95b0a7bb52c4a_17 = []string{"u", "l"}

var decodeMsgFieldSkip16zgensym_43f95b0a7bb52c4a_17 = []bool{false, false}

// fields of WalletUnlockedBalance
var decodeMsgFieldOrder18zgensym_43f95b0a7bb52c4a_19 = []string{"t", "o"}

var decodeMsgFieldSkip18zgensym_43f95b0a7bb52c4a_19 = []bool{false, false}

// fields of WalletUnlockedOutput
var decodeMsgFieldOrder21zgensym_43f95b0a7bb52c4a_22 = []string{"a", "d"}

var decodeMsgFieldSkip21zgensym_43f95b0a7bb52c4a_22 = []bool{false, false}

// fields of WalletLockedBalance
var decodeMsgFieldOrder23zgensym_43f95b0a7bb52c4a_24 = []string{"t", "o"}

var decodeMsgFieldSkip23zgensym_43f95b0a7bb52c4a_24 = []bool{false, false}

// fields of WalletLockedOutput
var decodeMsgFieldOrder26zgensym_43f95b0a7bb52c4a_27 = []string{"a", "lu", "d"}

var decodeMsgFieldSkip26zgensym_43f95b0a7bb52c4a_27 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *EncodableWalletBalance) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.Unlocked == nil) // pointer, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Locked == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *EncodableWalletBalance) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_43f95b0a7bb52c4a_28 [2]bool
	fieldsInUse_zgensym_43f95b0a7bb52c4a_29 := z.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_28[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_29 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'EncodableWalletBalance'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x45, 0x6e, 0x63, 0x6f, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_43f95b0a7bb52c4a_28[0] {
		// write "u"
		err = en.Append(0xa1, 0x75)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Unlocked == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// record the pointer for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Unlocked)
			if err != nil {
				return
			}
			if !dup {

				// honor the omitempty tags
				var empty_zgensym_43f95b0a7bb52c4a_30 [2]bool
				fieldsInUse_zgensym_43f95b0a7bb52c4a_31 := z.Unlocked.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_30[:])

				// map header
				err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_31 + 1)
				if err != nil {
					return err
				}

				// runtime struct type identification for 'WalletUnlockedBalance'
				err = en.Append(0xa1, 0x40)
				if err != nil {
					return err
				}
				err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65})
				if err != nil {
					return err
				}

				if !empty_zgensym_43f95b0a7bb52c4a_30[0] {
					// write "t"
					err = en.Append(0xa1, 0x74)
					if err != nil {
						return err
					}
					// encodeGen.gBase IDENT

					// record the interface for deduplication
					var dup bool
					dup, err = en.DedupWriteIsDup(z.Unlocked.Total)
					if err != nil {
						return
					}
					if !dup {
						err = z.Unlocked.Total.EncodeMsg(en)
						if err != nil {
							return
						}
					}
				}

				if !empty_zgensym_43f95b0a7bb52c4a_30[1] {
					// write "o"
					err = en.Append(0xa1, 0x6f)
					if err != nil {
						return err
					}
					err = en.WriteMapHeader(uint32(len(z.Unlocked.Outputs)))
					if err != nil {
						return
					}
					for zgensym_43f95b0a7bb52c4a_12, zgensym_43f95b0a7bb52c4a_13 := range z.Unlocked.Outputs {
						err = en.WriteString(zgensym_43f95b0a7bb52c4a_12)
						if err != nil {
							return
						}

						// honor the omitempty tags
						var empty_zgensym_43f95b0a7bb52c4a_32 [2]bool
						fieldsInUse_zgensym_43f95b0a7bb52c4a_33 := zgensym_43f95b0a7bb52c4a_13.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_32[:])

						// map header
						err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_33 + 1)
						if err != nil {
							return err
						}

						// runtime struct type identification for 'WalletUnlockedOutput'
						err = en.Append(0xa1, 0x40)
						if err != nil {
							return err
						}
						err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74})
						if err != nil {
							return err
						}

						if !empty_zgensym_43f95b0a7bb52c4a_32[0] {
							// write "a"
							err = en.Append(0xa1, 0x61)
							if err != nil {
								return err
							}
							// encodeGen.gBase IDENT

							// record the interface for deduplication
							var dup bool
							dup, err = en.DedupWriteIsDup(zgensym_43f95b0a7bb52c4a_13.Amount)
							if err != nil {
								return
							}
							if !dup {
								err = zgensym_43f95b0a7bb52c4a_13.Amount.EncodeMsg(en)
								if err != nil {
									return
								}
							}
						}

						if !empty_zgensym_43f95b0a7bb52c4a_32[1] {
							// write "d"
							err = en.Append(0xa1, 0x64)
							if err != nil {
								return err
							}
							err = en.WriteString(zgensym_43f95b0a7bb52c4a_13.Description)
							if err != nil {
								return
							}
						}

					}
				}

			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_28[1] {
		// write "l"
		err = en.Append(0xa1, 0x6c)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Locked == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// record the pointer for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Locked)
			if err != nil {
				return
			}
			if !dup {

				// honor the omitempty tags
				var empty_zgensym_43f95b0a7bb52c4a_34 [2]bool
				fieldsInUse_zgensym_43f95b0a7bb52c4a_35 := z.Locked.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_34[:])

				// map header
				err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_35 + 1)
				if err != nil {
					return err
				}

				// runtime struct type identification for 'WalletLockedBalance'
				err = en.Append(0xa1, 0x40)
				if err != nil {
					return err
				}
				err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65})
				if err != nil {
					return err
				}

				if !empty_zgensym_43f95b0a7bb52c4a_34[0] {
					// write "t"
					err = en.Append(0xa1, 0x74)
					if err != nil {
						return err
					}
					// encodeGen.gBase IDENT

					// record the interface for deduplication
					var dup bool
					dup, err = en.DedupWriteIsDup(z.Locked.Total)
					if err != nil {
						return
					}
					if !dup {
						err = z.Locked.Total.EncodeMsg(en)
						if err != nil {
							return
						}
					}
				}

				if !empty_zgensym_43f95b0a7bb52c4a_34[1] {
					// write "o"
					err = en.Append(0xa1, 0x6f)
					if err != nil {
						return err
					}
					err = en.WriteMapHeader(uint32(len(z.Locked.Outputs)))
					if err != nil {
						return
					}
					for zgensym_43f95b0a7bb52c4a_14, zgensym_43f95b0a7bb52c4a_15 := range z.Locked.Outputs {
						err = en.WriteString(zgensym_43f95b0a7bb52c4a_14)
						if err != nil {
							return
						}

						// honor the omitempty tags
						var empty_zgensym_43f95b0a7bb52c4a_36 [3]bool
						fieldsInUse_zgensym_43f95b0a7bb52c4a_37 := zgensym_43f95b0a7bb52c4a_15.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_36[:])

						// map header
						err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_37 + 1)
						if err != nil {
							return err
						}

						// runtime struct type identification for 'WalletLockedOutput'
						err = en.Append(0xa1, 0x40)
						if err != nil {
							return err
						}
						err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74})
						if err != nil {
							return err
						}

						if !empty_zgensym_43f95b0a7bb52c4a_36[0] {
							// write "a"
							err = en.Append(0xa1, 0x61)
							if err != nil {
								return err
							}
							// encodeGen.gBase IDENT

							// record the interface for deduplication
							var dup bool
							dup, err = en.DedupWriteIsDup(zgensym_43f95b0a7bb52c4a_15.Amount)
							if err != nil {
								return
							}
							if !dup {
								err = zgensym_43f95b0a7bb52c4a_15.Amount.EncodeMsg(en)
								if err != nil {
									return
								}
							}
						}

						if !empty_zgensym_43f95b0a7bb52c4a_36[1] {
							// write "lu"
							err = en.Append(0xa2, 0x6c, 0x75)
							if err != nil {
								return err
							}
							// encodeGen.gBase IDENT

							// record the interface for deduplication
							var dup bool
							dup, err = en.DedupWriteIsDup(zgensym_43f95b0a7bb52c4a_15.LockedUntil)
							if err != nil {
								return
							}
							if !dup {
								err = zgensym_43f95b0a7bb52c4a_15.LockedUntil.EncodeMsg(en)
								if err != nil {
									return
								}
							}
						}

						if !empty_zgensym_43f95b0a7bb52c4a_36[2] {
							// write "d"
							err = en.Append(0xa1, 0x64)
							if err != nil {
								return err
							}
							err = en.WriteString(zgensym_43f95b0a7bb52c4a_15.Description)
							if err != nil {
								return
							}
						}

					}
				}

			}
		}
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EncodableWalletBalance) Msgsize() (s int) {
	s = 1 + 2
	if z.Unlocked == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 2 + z.Unlocked.Total.Msgsize() + 2 + msgp.MapHeaderSize
		if z.Unlocked.Outputs != nil {
			for zgensym_43f95b0a7bb52c4a_12, zgensym_43f95b0a7bb52c4a_13 := range z.Unlocked.Outputs {
				_ = zgensym_43f95b0a7bb52c4a_13
				_ = zgensym_43f95b0a7bb52c4a_12
				s += msgp.StringPrefixSize + len(zgensym_43f95b0a7bb52c4a_12) + 1 + 2 + zgensym_43f95b0a7bb52c4a_13.Amount.Msgsize() + 2 + msgp.StringPrefixSize + len(zgensym_43f95b0a7bb52c4a_13.Description)
			}
		}
	}
	s += 2
	if z.Locked == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 2 + z.Locked.Total.Msgsize() + 2 + msgp.MapHeaderSize
		if z.Locked.Outputs != nil {
			for zgensym_43f95b0a7bb52c4a_14, zgensym_43f95b0a7bb52c4a_15 := range z.Locked.Outputs {
				_ = zgensym_43f95b0a7bb52c4a_15
				_ = zgensym_43f95b0a7bb52c4a_14
				s += msgp.StringPrefixSize + len(zgensym_43f95b0a7bb52c4a_14) + 1 + 2 + zgensym_43f95b0a7bb52c4a_15.Amount.Msgsize() + 3 + zgensym_43f95b0a7bb52c4a_15.LockedUntil.Msgsize() + 2 + msgp.StringPrefixSize + len(zgensym_43f95b0a7bb52c4a_15.Description)
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *NetworkStats) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields38zgensym_43f95b0a7bb52c4a_39 = 15

	// -- templateDecodeMsg starts here--
	var totalEncodedFields38zgensym_43f95b0a7bb52c4a_39 uint32
	totalEncodedFields38zgensym_43f95b0a7bb52c4a_39, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft38zgensym_43f95b0a7bb52c4a_39 := totalEncodedFields38zgensym_43f95b0a7bb52c4a_39
	missingFieldsLeft38zgensym_43f95b0a7bb52c4a_39 := maxFields38zgensym_43f95b0a7bb52c4a_39 - totalEncodedFields38zgensym_43f95b0a7bb52c4a_39

	var nextMiss38zgensym_43f95b0a7bb52c4a_39 int32 = -1
	var found38zgensym_43f95b0a7bb52c4a_39 [maxFields38zgensym_43f95b0a7bb52c4a_39]bool
	var curField38zgensym_43f95b0a7bb52c4a_39 string

doneWithStruct38zgensym_43f95b0a7bb52c4a_39:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft38zgensym_43f95b0a7bb52c4a_39 > 0 || missingFieldsLeft38zgensym_43f95b0a7bb52c4a_39 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft38zgensym_43f95b0a7bb52c4a_39, missingFieldsLeft38zgensym_43f95b0a7bb52c4a_39, msgp.ShowFound(found38zgensym_43f95b0a7bb52c4a_39[:]), decodeMsgFieldOrder38zgensym_43f95b0a7bb52c4a_39)
		if encodedFieldsLeft38zgensym_43f95b0a7bb52c4a_39 > 0 {
			encodedFieldsLeft38zgensym_43f95b0a7bb52c4a_39--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField38zgensym_43f95b0a7bb52c4a_39 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss38zgensym_43f95b0a7bb52c4a_39 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss38zgensym_43f95b0a7bb52c4a_39 = 0
			}
			for nextMiss38zgensym_43f95b0a7bb52c4a_39 < maxFields38zgensym_43f95b0a7bb52c4a_39 && (found38zgensym_43f95b0a7bb52c4a_39[nextMiss38zgensym_43f95b0a7bb52c4a_39] || decodeMsgFieldSkip38zgensym_43f95b0a7bb52c4a_39[nextMiss38zgensym_43f95b0a7bb52c4a_39]) {
				nextMiss38zgensym_43f95b0a7bb52c4a_39++
			}
			if nextMiss38zgensym_43f95b0a7bb52c4a_39 == maxFields38zgensym_43f95b0a7bb52c4a_39 {
				// filled all the empty fields!
				break doneWithStruct38zgensym_43f95b0a7bb52c4a_39
			}
			missingFieldsLeft38zgensym_43f95b0a7bb52c4a_39--
			curField38zgensym_43f95b0a7bb52c4a_39 = decodeMsgFieldOrder38zgensym_43f95b0a7bb52c4a_39[nextMiss38zgensym_43f95b0a7bb52c4a_39]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField38zgensym_43f95b0a7bb52c4a_39)
		switch curField38zgensym_43f95b0a7bb52c4a_39 {
		// -- templateDecodeMsg ends here --

		case "cts":
			found38zgensym_43f95b0a7bb52c4a_39[0] = true
			err = z.Timestamp.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "cbh":
			found38zgensym_43f95b0a7bb52c4a_39[1] = true
			err = z.BlockHeight.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "txc":
			found38zgensym_43f95b0a7bb52c4a_39[2] = true
			z.TransactionCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "cctxc":
			found38zgensym_43f95b0a7bb52c4a_39[3] = true
			z.CoinCreationTransactionCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "ccdtxc":
			found38zgensym_43f95b0a7bb52c4a_39[4] = true
			z.CoinCreatorDefinitionTransactionCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "vtxc":
			found38zgensym_43f95b0a7bb52c4a_39[5] = true
			z.ValueTransactionCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "coc":
			found38zgensym_43f95b0a7bb52c4a_39[6] = true
			z.CoinOutputCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "lcoc":
			found38zgensym_43f95b0a7bb52c4a_39[7] = true
			z.LockedCoinOutputCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "cic":
			found38zgensym_43f95b0a7bb52c4a_39[8] = true
			z.CoinInputCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "mpc":
			found38zgensym_43f95b0a7bb52c4a_39[9] = true
			z.MinerPayoutCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "txfc":
			found38zgensym_43f95b0a7bb52c4a_39[10] = true
			z.TransactionFeeCount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "mpt":
			found38zgensym_43f95b0a7bb52c4a_39[11] = true
			err = z.MinerPayouts.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "txft":
			found38zgensym_43f95b0a7bb52c4a_39[12] = true
			err = z.TransactionFees.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "ct":
			found38zgensym_43f95b0a7bb52c4a_39[13] = true
			err = z.Coins.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "lct":
			found38zgensym_43f95b0a7bb52c4a_39[14] = true
			err = z.LockedCoins.DecodeMsg(dc)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss38zgensym_43f95b0a7bb52c4a_39 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of NetworkStats
var decodeMsgFieldOrder38zgensym_43f95b0a7bb52c4a_39 = []string{"cts", "cbh", "txc", "cctxc", "ccdtxc", "vtxc", "coc", "lcoc", "cic", "mpc", "txfc", "mpt", "txft", "ct", "lct"}

var decodeMsgFieldSkip38zgensym_43f95b0a7bb52c4a_39 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *NetworkStats) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 15
	}
	var fieldsInUse uint32 = 15
	isempty[0] = false
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = false
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.TransactionCount == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.CoinCreationTransactionCount == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.CoinCreatorDefinitionTransactionCount == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.ValueTransactionCount == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.CoinOutputCount == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (z.LockedCoinOutputCount == 0) // number, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (z.CoinInputCount == 0) // number, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (z.MinerPayoutCount == 0) // number, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (z.TransactionFeeCount == 0) // number, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = false
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = false
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = false
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = false
	if isempty[14] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *NetworkStats) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_43f95b0a7bb52c4a_40 [15]bool
	fieldsInUse_zgensym_43f95b0a7bb52c4a_41 := z.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_40[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_41 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'NetworkStats'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[0] {
		// write "cts"
		err = en.Append(0xa3, 0x63, 0x74, 0x73)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.Timestamp)
		if err != nil {
			return
		}
		if !dup {
			err = z.Timestamp.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[1] {
		// write "cbh"
		err = en.Append(0xa3, 0x63, 0x62, 0x68)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.BlockHeight)
		if err != nil {
			return
		}
		if !dup {
			err = z.BlockHeight.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[2] {
		// write "txc"
		err = en.Append(0xa3, 0x74, 0x78, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.TransactionCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[3] {
		// write "cctxc"
		err = en.Append(0xa5, 0x63, 0x63, 0x74, 0x78, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.CoinCreationTransactionCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[4] {
		// write "ccdtxc"
		err = en.Append(0xa6, 0x63, 0x63, 0x64, 0x74, 0x78, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.CoinCreatorDefinitionTransactionCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[5] {
		// write "vtxc"
		err = en.Append(0xa4, 0x76, 0x74, 0x78, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.ValueTransactionCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[6] {
		// write "coc"
		err = en.Append(0xa3, 0x63, 0x6f, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.CoinOutputCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[7] {
		// write "lcoc"
		err = en.Append(0xa4, 0x6c, 0x63, 0x6f, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.LockedCoinOutputCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[8] {
		// write "cic"
		err = en.Append(0xa3, 0x63, 0x69, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.CoinInputCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[9] {
		// write "mpc"
		err = en.Append(0xa3, 0x6d, 0x70, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.MinerPayoutCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[10] {
		// write "txfc"
		err = en.Append(0xa4, 0x74, 0x78, 0x66, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.TransactionFeeCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[11] {
		// write "mpt"
		err = en.Append(0xa3, 0x6d, 0x70, 0x74)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.MinerPayouts)
		if err != nil {
			return
		}
		if !dup {
			err = z.MinerPayouts.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[12] {
		// write "txft"
		err = en.Append(0xa4, 0x74, 0x78, 0x66, 0x74)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.TransactionFees)
		if err != nil {
			return
		}
		if !dup {
			err = z.TransactionFees.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[13] {
		// write "ct"
		err = en.Append(0xa2, 0x63, 0x74)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.Coins)
		if err != nil {
			return
		}
		if !dup {
			err = z.Coins.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_40[14] {
		// write "lct"
		err = en.Append(0xa3, 0x6c, 0x63, 0x74)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.LockedCoins)
		if err != nil {
			return
		}
		if !dup {
			err = z.LockedCoins.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *NetworkStats) Msgsize() (s int) {
	s = 1 + 4 + z.Timestamp.Msgsize() + 4 + z.BlockHeight.Msgsize() + 4 + msgp.Uint64Size + 6 + msgp.Uint64Size + 7 + msgp.Uint64Size + 5 + msgp.Uint64Size + 4 + msgp.Uint64Size + 5 + msgp.Uint64Size + 4 + msgp.Uint64Size + 4 + msgp.Uint64Size + 5 + msgp.Uint64Size + 4 + z.MinerPayouts.Msgsize() + 5 + z.TransactionFees.Msgsize() + 3 + z.Coins.Msgsize() + 4 + z.LockedCoins.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *WalletLockedBalance) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields44zgensym_43f95b0a7bb52c4a_45 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields44zgensym_43f95b0a7bb52c4a_45 uint32
	totalEncodedFields44zgensym_43f95b0a7bb52c4a_45, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft44zgensym_43f95b0a7bb52c4a_45 := totalEncodedFields44zgensym_43f95b0a7bb52c4a_45
	missingFieldsLeft44zgensym_43f95b0a7bb52c4a_45 := maxFields44zgensym_43f95b0a7bb52c4a_45 - totalEncodedFields44zgensym_43f95b0a7bb52c4a_45

	var nextMiss44zgensym_43f95b0a7bb52c4a_45 int32 = -1
	var found44zgensym_43f95b0a7bb52c4a_45 [maxFields44zgensym_43f95b0a7bb52c4a_45]bool
	var curField44zgensym_43f95b0a7bb52c4a_45 string

doneWithStruct44zgensym_43f95b0a7bb52c4a_45:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft44zgensym_43f95b0a7bb52c4a_45 > 0 || missingFieldsLeft44zgensym_43f95b0a7bb52c4a_45 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft44zgensym_43f95b0a7bb52c4a_45, missingFieldsLeft44zgensym_43f95b0a7bb52c4a_45, msgp.ShowFound(found44zgensym_43f95b0a7bb52c4a_45[:]), decodeMsgFieldOrder44zgensym_43f95b0a7bb52c4a_45)
		if encodedFieldsLeft44zgensym_43f95b0a7bb52c4a_45 > 0 {
			encodedFieldsLeft44zgensym_43f95b0a7bb52c4a_45--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField44zgensym_43f95b0a7bb52c4a_45 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss44zgensym_43f95b0a7bb52c4a_45 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss44zgensym_43f95b0a7bb52c4a_45 = 0
			}
			for nextMiss44zgensym_43f95b0a7bb52c4a_45 < maxFields44zgensym_43f95b0a7bb52c4a_45 && (found44zgensym_43f95b0a7bb52c4a_45[nextMiss44zgensym_43f95b0a7bb52c4a_45] || decodeMsgFieldSkip44zgensym_43f95b0a7bb52c4a_45[nextMiss44zgensym_43f95b0a7bb52c4a_45]) {
				nextMiss44zgensym_43f95b0a7bb52c4a_45++
			}
			if nextMiss44zgensym_43f95b0a7bb52c4a_45 == maxFields44zgensym_43f95b0a7bb52c4a_45 {
				// filled all the empty fields!
				break doneWithStruct44zgensym_43f95b0a7bb52c4a_45
			}
			missingFieldsLeft44zgensym_43f95b0a7bb52c4a_45--
			curField44zgensym_43f95b0a7bb52c4a_45 = decodeMsgFieldOrder44zgensym_43f95b0a7bb52c4a_45[nextMiss44zgensym_43f95b0a7bb52c4a_45]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField44zgensym_43f95b0a7bb52c4a_45)
		switch curField44zgensym_43f95b0a7bb52c4a_45 {
		// -- templateDecodeMsg ends here --

		case "t":
			found44zgensym_43f95b0a7bb52c4a_45[0] = true
			err = z.Total.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "o":
			found44zgensym_43f95b0a7bb52c4a_45[1] = true
			var zgensym_43f95b0a7bb52c4a_46 uint32
			zgensym_43f95b0a7bb52c4a_46, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Outputs == nil && zgensym_43f95b0a7bb52c4a_46 > 0 {
				z.Outputs = make(WalletLockedOutputMap, zgensym_43f95b0a7bb52c4a_46)
			} else if len(z.Outputs) > 0 {
				for key, _ := range z.Outputs {
					delete(z.Outputs, key)
				}
			}
			for zgensym_43f95b0a7bb52c4a_46 > 0 {
				zgensym_43f95b0a7bb52c4a_46--
				var zgensym_43f95b0a7bb52c4a_42 string
				var zgensym_43f95b0a7bb52c4a_43 WalletLockedOutput
				zgensym_43f95b0a7bb52c4a_42, err = dc.ReadString()
				if err != nil {
					return
				}
				const maxFields47zgensym_43f95b0a7bb52c4a_48 = 3

				// -- templateDecodeMsg starts here--
				var totalEncodedFields47zgensym_43f95b0a7bb52c4a_48 uint32
				totalEncodedFields47zgensym_43f95b0a7bb52c4a_48, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				encodedFieldsLeft47zgensym_43f95b0a7bb52c4a_48 := totalEncodedFields47zgensym_43f95b0a7bb52c4a_48
				missingFieldsLeft47zgensym_43f95b0a7bb52c4a_48 := maxFields47zgensym_43f95b0a7bb52c4a_48 - totalEncodedFields47zgensym_43f95b0a7bb52c4a_48

				var nextMiss47zgensym_43f95b0a7bb52c4a_48 int32 = -1
				var found47zgensym_43f95b0a7bb52c4a_48 [maxFields47zgensym_43f95b0a7bb52c4a_48]bool
				var curField47zgensym_43f95b0a7bb52c4a_48 string

			doneWithStruct47zgensym_43f95b0a7bb52c4a_48:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft47zgensym_43f95b0a7bb52c4a_48 > 0 || missingFieldsLeft47zgensym_43f95b0a7bb52c4a_48 > 0 {
					//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft47zgensym_43f95b0a7bb52c4a_48, missingFieldsLeft47zgensym_43f95b0a7bb52c4a_48, msgp.ShowFound(found47zgensym_43f95b0a7bb52c4a_48[:]), decodeMsgFieldOrder47zgensym_43f95b0a7bb52c4a_48)
					if encodedFieldsLeft47zgensym_43f95b0a7bb52c4a_48 > 0 {
						encodedFieldsLeft47zgensym_43f95b0a7bb52c4a_48--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							return
						}
						curField47zgensym_43f95b0a7bb52c4a_48 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss47zgensym_43f95b0a7bb52c4a_48 < 0 {
							// tell the reader to only give us Nils
							// until further notice.
							dc.PushAlwaysNil()
							nextMiss47zgensym_43f95b0a7bb52c4a_48 = 0
						}
						for nextMiss47zgensym_43f95b0a7bb52c4a_48 < maxFields47zgensym_43f95b0a7bb52c4a_48 && (found47zgensym_43f95b0a7bb52c4a_48[nextMiss47zgensym_43f95b0a7bb52c4a_48] || decodeMsgFieldSkip47zgensym_43f95b0a7bb52c4a_48[nextMiss47zgensym_43f95b0a7bb52c4a_48]) {
							nextMiss47zgensym_43f95b0a7bb52c4a_48++
						}
						if nextMiss47zgensym_43f95b0a7bb52c4a_48 == maxFields47zgensym_43f95b0a7bb52c4a_48 {
							// filled all the empty fields!
							break doneWithStruct47zgensym_43f95b0a7bb52c4a_48
						}
						missingFieldsLeft47zgensym_43f95b0a7bb52c4a_48--
						curField47zgensym_43f95b0a7bb52c4a_48 = decodeMsgFieldOrder47zgensym_43f95b0a7bb52c4a_48[nextMiss47zgensym_43f95b0a7bb52c4a_48]
					}
					//fmt.Printf("switching on curField: '%v'\n", curField47zgensym_43f95b0a7bb52c4a_48)
					switch curField47zgensym_43f95b0a7bb52c4a_48 {
					// -- templateDecodeMsg ends here --

					case "a":
						found47zgensym_43f95b0a7bb52c4a_48[0] = true
						err = zgensym_43f95b0a7bb52c4a_43.Amount.DecodeMsg(dc)
						if err != nil {
							return
						}
					case "lu":
						found47zgensym_43f95b0a7bb52c4a_48[1] = true
						err = zgensym_43f95b0a7bb52c4a_43.LockedUntil.DecodeMsg(dc)
						if err != nil {
							return
						}
					case "d":
						found47zgensym_43f95b0a7bb52c4a_48[2] = true
						zgensym_43f95b0a7bb52c4a_43.Description, err = dc.ReadString()
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
				if nextMiss47zgensym_43f95b0a7bb52c4a_48 != -1 {
					dc.PopAlwaysNil()
				}

				z.Outputs[zgensym_43f95b0a7bb52c4a_42] = zgensym_43f95b0a7bb52c4a_43
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss44zgensym_43f95b0a7bb52c4a_45 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of WalletLockedBalance
var decodeMsgFieldOrder44zgensym_43f95b0a7bb52c4a_45 = []string{"t", "o"}

var decodeMsgFieldSkip44zgensym_43f95b0a7bb52c4a_45 = []bool{false, false}

// fields of WalletLockedOutput
var decodeMsgFieldOrder47zgensym_43f95b0a7bb52c4a_48 = []string{"a", "lu", "d"}

var decodeMsgFieldSkip47zgensym_43f95b0a7bb52c4a_48 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *WalletLockedBalance) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = false
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Outputs) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *WalletLockedBalance) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_43f95b0a7bb52c4a_49 [2]bool
	fieldsInUse_zgensym_43f95b0a7bb52c4a_50 := z.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_49[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_50 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'WalletLockedBalance'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_43f95b0a7bb52c4a_49[0] {
		// write "t"
		err = en.Append(0xa1, 0x74)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.Total)
		if err != nil {
			return
		}
		if !dup {
			err = z.Total.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_49[1] {
		// write "o"
		err = en.Append(0xa1, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Outputs)))
		if err != nil {
			return
		}
		for zgensym_43f95b0a7bb52c4a_42, zgensym_43f95b0a7bb52c4a_43 := range z.Outputs {
			err = en.WriteString(zgensym_43f95b0a7bb52c4a_42)
			if err != nil {
				return
			}

			// honor the omitempty tags
			var empty_zgensym_43f95b0a7bb52c4a_51 [3]bool
			fieldsInUse_zgensym_43f95b0a7bb52c4a_52 := zgensym_43f95b0a7bb52c4a_43.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_51[:])

			// map header
			err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_52 + 1)
			if err != nil {
				return err
			}

			// runtime struct type identification for 'WalletLockedOutput'
			err = en.Append(0xa1, 0x40)
			if err != nil {
				return err
			}
			err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74})
			if err != nil {
				return err
			}

			if !empty_zgensym_43f95b0a7bb52c4a_51[0] {
				// write "a"
				err = en.Append(0xa1, 0x61)
				if err != nil {
					return err
				}
				// encodeGen.gBase IDENT

				// record the interface for deduplication
				var dup bool
				dup, err = en.DedupWriteIsDup(zgensym_43f95b0a7bb52c4a_43.Amount)
				if err != nil {
					return
				}
				if !dup {
					err = zgensym_43f95b0a7bb52c4a_43.Amount.EncodeMsg(en)
					if err != nil {
						return
					}
				}
			}

			if !empty_zgensym_43f95b0a7bb52c4a_51[1] {
				// write "lu"
				err = en.Append(0xa2, 0x6c, 0x75)
				if err != nil {
					return err
				}
				// encodeGen.gBase IDENT

				// record the interface for deduplication
				var dup bool
				dup, err = en.DedupWriteIsDup(zgensym_43f95b0a7bb52c4a_43.LockedUntil)
				if err != nil {
					return
				}
				if !dup {
					err = zgensym_43f95b0a7bb52c4a_43.LockedUntil.EncodeMsg(en)
					if err != nil {
						return
					}
				}
			}

			if !empty_zgensym_43f95b0a7bb52c4a_51[2] {
				// write "d"
				err = en.Append(0xa1, 0x64)
				if err != nil {
					return err
				}
				err = en.WriteString(zgensym_43f95b0a7bb52c4a_43.Description)
				if err != nil {
					return
				}
			}

		}
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WalletLockedBalance) Msgsize() (s int) {
	s = 1 + 2 + z.Total.Msgsize() + 2 + msgp.MapHeaderSize
	if z.Outputs != nil {
		for zgensym_43f95b0a7bb52c4a_42, zgensym_43f95b0a7bb52c4a_43 := range z.Outputs {
			_ = zgensym_43f95b0a7bb52c4a_43
			_ = zgensym_43f95b0a7bb52c4a_42
			s += msgp.StringPrefixSize + len(zgensym_43f95b0a7bb52c4a_42) + 1 + 2 + zgensym_43f95b0a7bb52c4a_43.Amount.Msgsize() + 3 + zgensym_43f95b0a7bb52c4a_43.LockedUntil.Msgsize() + 2 + msgp.StringPrefixSize + len(zgensym_43f95b0a7bb52c4a_43.Description)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *WalletLockedOutput) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields53zgensym_43f95b0a7bb52c4a_54 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields53zgensym_43f95b0a7bb52c4a_54 uint32
	totalEncodedFields53zgensym_43f95b0a7bb52c4a_54, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft53zgensym_43f95b0a7bb52c4a_54 := totalEncodedFields53zgensym_43f95b0a7bb52c4a_54
	missingFieldsLeft53zgensym_43f95b0a7bb52c4a_54 := maxFields53zgensym_43f95b0a7bb52c4a_54 - totalEncodedFields53zgensym_43f95b0a7bb52c4a_54

	var nextMiss53zgensym_43f95b0a7bb52c4a_54 int32 = -1
	var found53zgensym_43f95b0a7bb52c4a_54 [maxFields53zgensym_43f95b0a7bb52c4a_54]bool
	var curField53zgensym_43f95b0a7bb52c4a_54 string

doneWithStruct53zgensym_43f95b0a7bb52c4a_54:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft53zgensym_43f95b0a7bb52c4a_54 > 0 || missingFieldsLeft53zgensym_43f95b0a7bb52c4a_54 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft53zgensym_43f95b0a7bb52c4a_54, missingFieldsLeft53zgensym_43f95b0a7bb52c4a_54, msgp.ShowFound(found53zgensym_43f95b0a7bb52c4a_54[:]), decodeMsgFieldOrder53zgensym_43f95b0a7bb52c4a_54)
		if encodedFieldsLeft53zgensym_43f95b0a7bb52c4a_54 > 0 {
			encodedFieldsLeft53zgensym_43f95b0a7bb52c4a_54--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField53zgensym_43f95b0a7bb52c4a_54 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss53zgensym_43f95b0a7bb52c4a_54 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss53zgensym_43f95b0a7bb52c4a_54 = 0
			}
			for nextMiss53zgensym_43f95b0a7bb52c4a_54 < maxFields53zgensym_43f95b0a7bb52c4a_54 && (found53zgensym_43f95b0a7bb52c4a_54[nextMiss53zgensym_43f95b0a7bb52c4a_54] || decodeMsgFieldSkip53zgensym_43f95b0a7bb52c4a_54[nextMiss53zgensym_43f95b0a7bb52c4a_54]) {
				nextMiss53zgensym_43f95b0a7bb52c4a_54++
			}
			if nextMiss53zgensym_43f95b0a7bb52c4a_54 == maxFields53zgensym_43f95b0a7bb52c4a_54 {
				// filled all the empty fields!
				break doneWithStruct53zgensym_43f95b0a7bb52c4a_54
			}
			missingFieldsLeft53zgensym_43f95b0a7bb52c4a_54--
			curField53zgensym_43f95b0a7bb52c4a_54 = decodeMsgFieldOrder53zgensym_43f95b0a7bb52c4a_54[nextMiss53zgensym_43f95b0a7bb52c4a_54]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField53zgensym_43f95b0a7bb52c4a_54)
		switch curField53zgensym_43f95b0a7bb52c4a_54 {
		// -- templateDecodeMsg ends here --

		case "a":
			found53zgensym_43f95b0a7bb52c4a_54[0] = true
			err = z.Amount.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "lu":
			found53zgensym_43f95b0a7bb52c4a_54[1] = true
			err = z.LockedUntil.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "d":
			found53zgensym_43f95b0a7bb52c4a_54[2] = true
			z.Description, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss53zgensym_43f95b0a7bb52c4a_54 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of WalletLockedOutput
var decodeMsgFieldOrder53zgensym_43f95b0a7bb52c4a_54 = []string{"a", "lu", "d"}

var decodeMsgFieldSkip53zgensym_43f95b0a7bb52c4a_54 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *WalletLockedOutput) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = false
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = false
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Description) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *WalletLockedOutput) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_43f95b0a7bb52c4a_55 [3]bool
	fieldsInUse_zgensym_43f95b0a7bb52c4a_56 := z.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_55[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_56 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'WalletLockedOutput'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_43f95b0a7bb52c4a_55[0] {
		// write "a"
		err = en.Append(0xa1, 0x61)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.Amount)
		if err != nil {
			return
		}
		if !dup {
			err = z.Amount.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_55[1] {
		// write "lu"
		err = en.Append(0xa2, 0x6c, 0x75)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.LockedUntil)
		if err != nil {
			return
		}
		if !dup {
			err = z.LockedUntil.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_55[2] {
		// write "d"
		err = en.Append(0xa1, 0x64)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Description)
		if err != nil {
			return
		}
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WalletLockedOutput) Msgsize() (s int) {
	s = 1 + 2 + z.Amount.Msgsize() + 3 + z.LockedUntil.Msgsize() + 2 + msgp.StringPrefixSize + len(z.Description)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *WalletLockedOutputMap) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var zgensym_43f95b0a7bb52c4a_61 uint32
	zgensym_43f95b0a7bb52c4a_61, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	if (*z) == nil && zgensym_43f95b0a7bb52c4a_61 > 0 {
		(*z) = make(WalletLockedOutputMap, zgensym_43f95b0a7bb52c4a_61)
	} else if len((*z)) > 0 {
		for key, _ := range *z {
			delete((*z), key)
		}
	}
	for zgensym_43f95b0a7bb52c4a_61 > 0 {
		zgensym_43f95b0a7bb52c4a_61--
		var zgensym_43f95b0a7bb52c4a_59 string
		var zgensym_43f95b0a7bb52c4a_60 WalletLockedOutput
		zgensym_43f95b0a7bb52c4a_59, err = dc.ReadString()
		if err != nil {
			return
		}
		var field []byte
		_ = field
		const maxFields62zgensym_43f95b0a7bb52c4a_63 = 3

		// -- templateDecodeMsg starts here--
		var totalEncodedFields62zgensym_43f95b0a7bb52c4a_63 uint32
		totalEncodedFields62zgensym_43f95b0a7bb52c4a_63, err = dc.ReadMapHeader()
		if err != nil {
			return
		}
		encodedFieldsLeft62zgensym_43f95b0a7bb52c4a_63 := totalEncodedFields62zgensym_43f95b0a7bb52c4a_63
		missingFieldsLeft62zgensym_43f95b0a7bb52c4a_63 := maxFields62zgensym_43f95b0a7bb52c4a_63 - totalEncodedFields62zgensym_43f95b0a7bb52c4a_63

		var nextMiss62zgensym_43f95b0a7bb52c4a_63 int32 = -1
		var found62zgensym_43f95b0a7bb52c4a_63 [maxFields62zgensym_43f95b0a7bb52c4a_63]bool
		var curField62zgensym_43f95b0a7bb52c4a_63 string

	doneWithStruct62zgensym_43f95b0a7bb52c4a_63:
		// First fill all the encoded fields, then
		// treat the remaining, missing fields, as Nil.
		for encodedFieldsLeft62zgensym_43f95b0a7bb52c4a_63 > 0 || missingFieldsLeft62zgensym_43f95b0a7bb52c4a_63 > 0 {
			//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft62zgensym_43f95b0a7bb52c4a_63, missingFieldsLeft62zgensym_43f95b0a7bb52c4a_63, msgp.ShowFound(found62zgensym_43f95b0a7bb52c4a_63[:]), decodeMsgFieldOrder62zgensym_43f95b0a7bb52c4a_63)
			if encodedFieldsLeft62zgensym_43f95b0a7bb52c4a_63 > 0 {
				encodedFieldsLeft62zgensym_43f95b0a7bb52c4a_63--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					return
				}
				curField62zgensym_43f95b0a7bb52c4a_63 = msgp.UnsafeString(field)
			} else {
				//missing fields need handling
				if nextMiss62zgensym_43f95b0a7bb52c4a_63 < 0 {
					// tell the reader to only give us Nils
					// until further notice.
					dc.PushAlwaysNil()
					nextMiss62zgensym_43f95b0a7bb52c4a_63 = 0
				}
				for nextMiss62zgensym_43f95b0a7bb52c4a_63 < maxFields62zgensym_43f95b0a7bb52c4a_63 && (found62zgensym_43f95b0a7bb52c4a_63[nextMiss62zgensym_43f95b0a7bb52c4a_63] || decodeMsgFieldSkip62zgensym_43f95b0a7bb52c4a_63[nextMiss62zgensym_43f95b0a7bb52c4a_63]) {
					nextMiss62zgensym_43f95b0a7bb52c4a_63++
				}
				if nextMiss62zgensym_43f95b0a7bb52c4a_63 == maxFields62zgensym_43f95b0a7bb52c4a_63 {
					// filled all the empty fields!
					break doneWithStruct62zgensym_43f95b0a7bb52c4a_63
				}
				missingFieldsLeft62zgensym_43f95b0a7bb52c4a_63--
				curField62zgensym_43f95b0a7bb52c4a_63 = decodeMsgFieldOrder62zgensym_43f95b0a7bb52c4a_63[nextMiss62zgensym_43f95b0a7bb52c4a_63]
			}
			//fmt.Printf("switching on curField: '%v'\n", curField62zgensym_43f95b0a7bb52c4a_63)
			switch curField62zgensym_43f95b0a7bb52c4a_63 {
			// -- templateDecodeMsg ends here --

			case "a":
				found62zgensym_43f95b0a7bb52c4a_63[0] = true
				err = zgensym_43f95b0a7bb52c4a_60.Amount.DecodeMsg(dc)
				if err != nil {
					return
				}
			case "lu":
				found62zgensym_43f95b0a7bb52c4a_63[1] = true
				err = zgensym_43f95b0a7bb52c4a_60.LockedUntil.DecodeMsg(dc)
				if err != nil {
					return
				}
			case "d":
				found62zgensym_43f95b0a7bb52c4a_63[2] = true
				zgensym_43f95b0a7bb52c4a_60.Description, err = dc.ReadString()
				if err != nil {
					return
				}
			default:
				err = dc.Skip()
				if err != nil {
					return
				}
			}
		}
		if nextMiss62zgensym_43f95b0a7bb52c4a_63 != -1 {
			dc.PopAlwaysNil()
		}

		(*z)[zgensym_43f95b0a7bb52c4a_59] = zgensym_43f95b0a7bb52c4a_60
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of WalletLockedOutput
var decodeMsgFieldOrder62zgensym_43f95b0a7bb52c4a_63 = []string{"a", "lu", "d"}

var decodeMsgFieldSkip62zgensym_43f95b0a7bb52c4a_63 = []bool{false, false, false}

// EncodeMsg implements msgp.Encodable
func (z WalletLockedOutputMap) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		return
	}
	for zgensym_43f95b0a7bb52c4a_64, zgensym_43f95b0a7bb52c4a_65 := range z {
		err = en.WriteString(zgensym_43f95b0a7bb52c4a_64)
		if err != nil {
			return
		}

		// honor the omitempty tags
		var empty_zgensym_43f95b0a7bb52c4a_66 [3]bool
		fieldsInUse_zgensym_43f95b0a7bb52c4a_67 := zgensym_43f95b0a7bb52c4a_65.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_66[:])

		// map header
		err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_67 + 1)
		if err != nil {
			return err
		}

		// runtime struct type identification for 'WalletLockedOutput'
		err = en.Append(0xa1, 0x40)
		if err != nil {
			return err
		}
		err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74})
		if err != nil {
			return err
		}

		if !empty_zgensym_43f95b0a7bb52c4a_66[0] {
			// write "a"
			err = en.Append(0xa1, 0x61)
			if err != nil {
				return err
			}
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(zgensym_43f95b0a7bb52c4a_65.Amount)
			if err != nil {
				return
			}
			if !dup {
				err = zgensym_43f95b0a7bb52c4a_65.Amount.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}

		if !empty_zgensym_43f95b0a7bb52c4a_66[1] {
			// write "lu"
			err = en.Append(0xa2, 0x6c, 0x75)
			if err != nil {
				return err
			}
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(zgensym_43f95b0a7bb52c4a_65.LockedUntil)
			if err != nil {
				return
			}
			if !dup {
				err = zgensym_43f95b0a7bb52c4a_65.LockedUntil.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}

		if !empty_zgensym_43f95b0a7bb52c4a_66[2] {
			// write "d"
			err = en.Append(0xa1, 0x64)
			if err != nil {
				return err
			}
			err = en.WriteString(zgensym_43f95b0a7bb52c4a_65.Description)
			if err != nil {
				return
			}
		}

	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z WalletLockedOutputMap) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zgensym_43f95b0a7bb52c4a_64, zgensym_43f95b0a7bb52c4a_65 := range z {
			_ = zgensym_43f95b0a7bb52c4a_65
			_ = zgensym_43f95b0a7bb52c4a_64
			s += msgp.StringPrefixSize + len(zgensym_43f95b0a7bb52c4a_64) + 1 + 2 + zgensym_43f95b0a7bb52c4a_65.Amount.Msgsize() + 3 + zgensym_43f95b0a7bb52c4a_65.LockedUntil.Msgsize() + 2 + msgp.StringPrefixSize + len(zgensym_43f95b0a7bb52c4a_65.Description)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *WalletMultiSignData) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields69zgensym_43f95b0a7bb52c4a_70 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields69zgensym_43f95b0a7bb52c4a_70 uint32
	totalEncodedFields69zgensym_43f95b0a7bb52c4a_70, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft69zgensym_43f95b0a7bb52c4a_70 := totalEncodedFields69zgensym_43f95b0a7bb52c4a_70
	missingFieldsLeft69zgensym_43f95b0a7bb52c4a_70 := maxFields69zgensym_43f95b0a7bb52c4a_70 - totalEncodedFields69zgensym_43f95b0a7bb52c4a_70

	var nextMiss69zgensym_43f95b0a7bb52c4a_70 int32 = -1
	var found69zgensym_43f95b0a7bb52c4a_70 [maxFields69zgensym_43f95b0a7bb52c4a_70]bool
	var curField69zgensym_43f95b0a7bb52c4a_70 string

doneWithStruct69zgensym_43f95b0a7bb52c4a_70:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft69zgensym_43f95b0a7bb52c4a_70 > 0 || missingFieldsLeft69zgensym_43f95b0a7bb52c4a_70 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft69zgensym_43f95b0a7bb52c4a_70, missingFieldsLeft69zgensym_43f95b0a7bb52c4a_70, msgp.ShowFound(found69zgensym_43f95b0a7bb52c4a_70[:]), decodeMsgFieldOrder69zgensym_43f95b0a7bb52c4a_70)
		if encodedFieldsLeft69zgensym_43f95b0a7bb52c4a_70 > 0 {
			encodedFieldsLeft69zgensym_43f95b0a7bb52c4a_70--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField69zgensym_43f95b0a7bb52c4a_70 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss69zgensym_43f95b0a7bb52c4a_70 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss69zgensym_43f95b0a7bb52c4a_70 = 0
			}
			for nextMiss69zgensym_43f95b0a7bb52c4a_70 < maxFields69zgensym_43f95b0a7bb52c4a_70 && (found69zgensym_43f95b0a7bb52c4a_70[nextMiss69zgensym_43f95b0a7bb52c4a_70] || decodeMsgFieldSkip69zgensym_43f95b0a7bb52c4a_70[nextMiss69zgensym_43f95b0a7bb52c4a_70]) {
				nextMiss69zgensym_43f95b0a7bb52c4a_70++
			}
			if nextMiss69zgensym_43f95b0a7bb52c4a_70 == maxFields69zgensym_43f95b0a7bb52c4a_70 {
				// filled all the empty fields!
				break doneWithStruct69zgensym_43f95b0a7bb52c4a_70
			}
			missingFieldsLeft69zgensym_43f95b0a7bb52c4a_70--
			curField69zgensym_43f95b0a7bb52c4a_70 = decodeMsgFieldOrder69zgensym_43f95b0a7bb52c4a_70[nextMiss69zgensym_43f95b0a7bb52c4a_70]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField69zgensym_43f95b0a7bb52c4a_70)
		switch curField69zgensym_43f95b0a7bb52c4a_70 {
		// -- templateDecodeMsg ends here --

		case "o":
			found69zgensym_43f95b0a7bb52c4a_70[0] = true
			var zgensym_43f95b0a7bb52c4a_71 uint32
			zgensym_43f95b0a7bb52c4a_71, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Owners) >= int(zgensym_43f95b0a7bb52c4a_71) {
				z.Owners = (z.Owners)[:zgensym_43f95b0a7bb52c4a_71]
			} else {
				z.Owners = make([]UnlockHash, zgensym_43f95b0a7bb52c4a_71)
			}
			for zgensym_43f95b0a7bb52c4a_68 := range z.Owners {
				err = z.Owners[zgensym_43f95b0a7bb52c4a_68].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "sr":
			found69zgensym_43f95b0a7bb52c4a_70[1] = true
			z.SignaturesRequired, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss69zgensym_43f95b0a7bb52c4a_70 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of WalletMultiSignData
var decodeMsgFieldOrder69zgensym_43f95b0a7bb52c4a_70 = []string{"o", "sr"}

var decodeMsgFieldSkip69zgensym_43f95b0a7bb52c4a_70 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *WalletMultiSignData) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.Owners) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.SignaturesRequired == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *WalletMultiSignData) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_43f95b0a7bb52c4a_72 [2]bool
	fieldsInUse_zgensym_43f95b0a7bb52c4a_73 := z.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_72[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_73 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'WalletMultiSignData'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61})
	if err != nil {
		return err
	}

	if !empty_zgensym_43f95b0a7bb52c4a_72[0] {
		// write "o"
		err = en.Append(0xa1, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Owners)))
		if err != nil {
			return
		}
		for zgensym_43f95b0a7bb52c4a_68 := range z.Owners {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Owners[zgensym_43f95b0a7bb52c4a_68])
			if err != nil {
				return
			}
			if !dup {
				err = z.Owners[zgensym_43f95b0a7bb52c4a_68].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_72[1] {
		// write "sr"
		err = en.Append(0xa2, 0x73, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.SignaturesRequired)
		if err != nil {
			return
		}
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WalletMultiSignData) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for zgensym_43f95b0a7bb52c4a_68 := range z.Owners {
		s += z.Owners[zgensym_43f95b0a7bb52c4a_68].Msgsize()
	}
	s += 3 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *WalletUnlockedBalance) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields76zgensym_43f95b0a7bb52c4a_77 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields76zgensym_43f95b0a7bb52c4a_77 uint32
	totalEncodedFields76zgensym_43f95b0a7bb52c4a_77, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft76zgensym_43f95b0a7bb52c4a_77 := totalEncodedFields76zgensym_43f95b0a7bb52c4a_77
	missingFieldsLeft76zgensym_43f95b0a7bb52c4a_77 := maxFields76zgensym_43f95b0a7bb52c4a_77 - totalEncodedFields76zgensym_43f95b0a7bb52c4a_77

	var nextMiss76zgensym_43f95b0a7bb52c4a_77 int32 = -1
	var found76zgensym_43f95b0a7bb52c4a_77 [maxFields76zgensym_43f95b0a7bb52c4a_77]bool
	var curField76zgensym_43f95b0a7bb52c4a_77 string

doneWithStruct76zgensym_43f95b0a7bb52c4a_77:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft76zgensym_43f95b0a7bb52c4a_77 > 0 || missingFieldsLeft76zgensym_43f95b0a7bb52c4a_77 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft76zgensym_43f95b0a7bb52c4a_77, missingFieldsLeft76zgensym_43f95b0a7bb52c4a_77, msgp.ShowFound(found76zgensym_43f95b0a7bb52c4a_77[:]), decodeMsgFieldOrder76zgensym_43f95b0a7bb52c4a_77)
		if encodedFieldsLeft76zgensym_43f95b0a7bb52c4a_77 > 0 {
			encodedFieldsLeft76zgensym_43f95b0a7bb52c4a_77--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField76zgensym_43f95b0a7bb52c4a_77 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss76zgensym_43f95b0a7bb52c4a_77 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss76zgensym_43f95b0a7bb52c4a_77 = 0
			}
			for nextMiss76zgensym_43f95b0a7bb52c4a_77 < maxFields76zgensym_43f95b0a7bb52c4a_77 && (found76zgensym_43f95b0a7bb52c4a_77[nextMiss76zgensym_43f95b0a7bb52c4a_77] || decodeMsgFieldSkip76zgensym_43f95b0a7bb52c4a_77[nextMiss76zgensym_43f95b0a7bb52c4a_77]) {
				nextMiss76zgensym_43f95b0a7bb52c4a_77++
			}
			if nextMiss76zgensym_43f95b0a7bb52c4a_77 == maxFields76zgensym_43f95b0a7bb52c4a_77 {
				// filled all the empty fields!
				break doneWithStruct76zgensym_43f95b0a7bb52c4a_77
			}
			missingFieldsLeft76zgensym_43f95b0a7bb52c4a_77--
			curField76zgensym_43f95b0a7bb52c4a_77 = decodeMsgFieldOrder76zgensym_43f95b0a7bb52c4a_77[nextMiss76zgensym_43f95b0a7bb52c4a_77]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField76zgensym_43f95b0a7bb52c4a_77)
		switch curField76zgensym_43f95b0a7bb52c4a_77 {
		// -- templateDecodeMsg ends here --

		case "t":
			found76zgensym_43f95b0a7bb52c4a_77[0] = true
			err = z.Total.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "o":
			found76zgensym_43f95b0a7bb52c4a_77[1] = true
			var zgensym_43f95b0a7bb52c4a_78 uint32
			zgensym_43f95b0a7bb52c4a_78, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Outputs == nil && zgensym_43f95b0a7bb52c4a_78 > 0 {
				z.Outputs = make(WalletUnlockedOutputMap, zgensym_43f95b0a7bb52c4a_78)
			} else if len(z.Outputs) > 0 {
				for key, _ := range z.Outputs {
					delete(z.Outputs, key)
				}
			}
			for zgensym_43f95b0a7bb52c4a_78 > 0 {
				zgensym_43f95b0a7bb52c4a_78--
				var zgensym_43f95b0a7bb52c4a_74 string
				var zgensym_43f95b0a7bb52c4a_75 WalletUnlockedOutput
				zgensym_43f95b0a7bb52c4a_74, err = dc.ReadString()
				if err != nil {
					return
				}
				const maxFields79zgensym_43f95b0a7bb52c4a_80 = 2

				// -- templateDecodeMsg starts here--
				var totalEncodedFields79zgensym_43f95b0a7bb52c4a_80 uint32
				totalEncodedFields79zgensym_43f95b0a7bb52c4a_80, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				encodedFieldsLeft79zgensym_43f95b0a7bb52c4a_80 := totalEncodedFields79zgensym_43f95b0a7bb52c4a_80
				missingFieldsLeft79zgensym_43f95b0a7bb52c4a_80 := maxFields79zgensym_43f95b0a7bb52c4a_80 - totalEncodedFields79zgensym_43f95b0a7bb52c4a_80

				var nextMiss79zgensym_43f95b0a7bb52c4a_80 int32 = -1
				var found79zgensym_43f95b0a7bb52c4a_80 [maxFields79zgensym_43f95b0a7bb52c4a_80]bool
				var curField79zgensym_43f95b0a7bb52c4a_80 string

			doneWithStruct79zgensym_43f95b0a7bb52c4a_80:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft79zgensym_43f95b0a7bb52c4a_80 > 0 || missingFieldsLeft79zgensym_43f95b0a7bb52c4a_80 > 0 {
					//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft79zgensym_43f95b0a7bb52c4a_80, missingFieldsLeft79zgensym_43f95b0a7bb52c4a_80, msgp.ShowFound(found79zgensym_43f95b0a7bb52c4a_80[:]), decodeMsgFieldOrder79zgensym_43f95b0a7bb52c4a_80)
					if encodedFieldsLeft79zgensym_43f95b0a7bb52c4a_80 > 0 {
						encodedFieldsLeft79zgensym_43f95b0a7bb52c4a_80--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							return
						}
						curField79zgensym_43f95b0a7bb52c4a_80 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss79zgensym_43f95b0a7bb52c4a_80 < 0 {
							// tell the reader to only give us Nils
							// until further notice.
							dc.PushAlwaysNil()
							nextMiss79zgensym_43f95b0a7bb52c4a_80 = 0
						}
						for nextMiss79zgensym_43f95b0a7bb52c4a_80 < maxFields79zgensym_43f95b0a7bb52c4a_80 && (found79zgensym_43f95b0a7bb52c4a_80[nextMiss79zgensym_43f95b0a7bb52c4a_80] || decodeMsgFieldSkip79zgensym_43f95b0a7bb52c4a_80[nextMiss79zgensym_43f95b0a7bb52c4a_80]) {
							nextMiss79zgensym_43f95b0a7bb52c4a_80++
						}
						if nextMiss79zgensym_43f95b0a7bb52c4a_80 == maxFields79zgensym_43f95b0a7bb52c4a_80 {
							// filled all the empty fields!
							break doneWithStruct79zgensym_43f95b0a7bb52c4a_80
						}
						missingFieldsLeft79zgensym_43f95b0a7bb52c4a_80--
						curField79zgensym_43f95b0a7bb52c4a_80 = decodeMsgFieldOrder79zgensym_43f95b0a7bb52c4a_80[nextMiss79zgensym_43f95b0a7bb52c4a_80]
					}
					//fmt.Printf("switching on curField: '%v'\n", curField79zgensym_43f95b0a7bb52c4a_80)
					switch curField79zgensym_43f95b0a7bb52c4a_80 {
					// -- templateDecodeMsg ends here --

					case "a":
						found79zgensym_43f95b0a7bb52c4a_80[0] = true
						err = zgensym_43f95b0a7bb52c4a_75.Amount.DecodeMsg(dc)
						if err != nil {
							return
						}
					case "d":
						found79zgensym_43f95b0a7bb52c4a_80[1] = true
						zgensym_43f95b0a7bb52c4a_75.Description, err = dc.ReadString()
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
				if nextMiss79zgensym_43f95b0a7bb52c4a_80 != -1 {
					dc.PopAlwaysNil()
				}

				z.Outputs[zgensym_43f95b0a7bb52c4a_74] = zgensym_43f95b0a7bb52c4a_75
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss76zgensym_43f95b0a7bb52c4a_77 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of WalletUnlockedBalance
var decodeMsgFieldOrder76zgensym_43f95b0a7bb52c4a_77 = []string{"t", "o"}

var decodeMsgFieldSkip76zgensym_43f95b0a7bb52c4a_77 = []bool{false, false}

// fields of WalletUnlockedOutput
var decodeMsgFieldOrder79zgensym_43f95b0a7bb52c4a_80 = []string{"a", "d"}

var decodeMsgFieldSkip79zgensym_43f95b0a7bb52c4a_80 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *WalletUnlockedBalance) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = false
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Outputs) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *WalletUnlockedBalance) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_43f95b0a7bb52c4a_81 [2]bool
	fieldsInUse_zgensym_43f95b0a7bb52c4a_82 := z.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_81[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_82 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'WalletUnlockedBalance'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_43f95b0a7bb52c4a_81[0] {
		// write "t"
		err = en.Append(0xa1, 0x74)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.Total)
		if err != nil {
			return
		}
		if !dup {
			err = z.Total.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_81[1] {
		// write "o"
		err = en.Append(0xa1, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Outputs)))
		if err != nil {
			return
		}
		for zgensym_43f95b0a7bb52c4a_74, zgensym_43f95b0a7bb52c4a_75 := range z.Outputs {
			err = en.WriteString(zgensym_43f95b0a7bb52c4a_74)
			if err != nil {
				return
			}

			// honor the omitempty tags
			var empty_zgensym_43f95b0a7bb52c4a_83 [2]bool
			fieldsInUse_zgensym_43f95b0a7bb52c4a_84 := zgensym_43f95b0a7bb52c4a_75.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_83[:])

			// map header
			err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_84 + 1)
			if err != nil {
				return err
			}

			// runtime struct type identification for 'WalletUnlockedOutput'
			err = en.Append(0xa1, 0x40)
			if err != nil {
				return err
			}
			err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74})
			if err != nil {
				return err
			}

			if !empty_zgensym_43f95b0a7bb52c4a_83[0] {
				// write "a"
				err = en.Append(0xa1, 0x61)
				if err != nil {
					return err
				}
				// encodeGen.gBase IDENT

				// record the interface for deduplication
				var dup bool
				dup, err = en.DedupWriteIsDup(zgensym_43f95b0a7bb52c4a_75.Amount)
				if err != nil {
					return
				}
				if !dup {
					err = zgensym_43f95b0a7bb52c4a_75.Amount.EncodeMsg(en)
					if err != nil {
						return
					}
				}
			}

			if !empty_zgensym_43f95b0a7bb52c4a_83[1] {
				// write "d"
				err = en.Append(0xa1, 0x64)
				if err != nil {
					return err
				}
				err = en.WriteString(zgensym_43f95b0a7bb52c4a_75.Description)
				if err != nil {
					return
				}
			}

		}
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WalletUnlockedBalance) Msgsize() (s int) {
	s = 1 + 2 + z.Total.Msgsize() + 2 + msgp.MapHeaderSize
	if z.Outputs != nil {
		for zgensym_43f95b0a7bb52c4a_74, zgensym_43f95b0a7bb52c4a_75 := range z.Outputs {
			_ = zgensym_43f95b0a7bb52c4a_75
			_ = zgensym_43f95b0a7bb52c4a_74
			s += msgp.StringPrefixSize + len(zgensym_43f95b0a7bb52c4a_74) + 1 + 2 + zgensym_43f95b0a7bb52c4a_75.Amount.Msgsize() + 2 + msgp.StringPrefixSize + len(zgensym_43f95b0a7bb52c4a_75.Description)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *WalletUnlockedOutput) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields85zgensym_43f95b0a7bb52c4a_86 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields85zgensym_43f95b0a7bb52c4a_86 uint32
	totalEncodedFields85zgensym_43f95b0a7bb52c4a_86, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft85zgensym_43f95b0a7bb52c4a_86 := totalEncodedFields85zgensym_43f95b0a7bb52c4a_86
	missingFieldsLeft85zgensym_43f95b0a7bb52c4a_86 := maxFields85zgensym_43f95b0a7bb52c4a_86 - totalEncodedFields85zgensym_43f95b0a7bb52c4a_86

	var nextMiss85zgensym_43f95b0a7bb52c4a_86 int32 = -1
	var found85zgensym_43f95b0a7bb52c4a_86 [maxFields85zgensym_43f95b0a7bb52c4a_86]bool
	var curField85zgensym_43f95b0a7bb52c4a_86 string

doneWithStruct85zgensym_43f95b0a7bb52c4a_86:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft85zgensym_43f95b0a7bb52c4a_86 > 0 || missingFieldsLeft85zgensym_43f95b0a7bb52c4a_86 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft85zgensym_43f95b0a7bb52c4a_86, missingFieldsLeft85zgensym_43f95b0a7bb52c4a_86, msgp.ShowFound(found85zgensym_43f95b0a7bb52c4a_86[:]), decodeMsgFieldOrder85zgensym_43f95b0a7bb52c4a_86)
		if encodedFieldsLeft85zgensym_43f95b0a7bb52c4a_86 > 0 {
			encodedFieldsLeft85zgensym_43f95b0a7bb52c4a_86--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField85zgensym_43f95b0a7bb52c4a_86 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss85zgensym_43f95b0a7bb52c4a_86 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss85zgensym_43f95b0a7bb52c4a_86 = 0
			}
			for nextMiss85zgensym_43f95b0a7bb52c4a_86 < maxFields85zgensym_43f95b0a7bb52c4a_86 && (found85zgensym_43f95b0a7bb52c4a_86[nextMiss85zgensym_43f95b0a7bb52c4a_86] || decodeMsgFieldSkip85zgensym_43f95b0a7bb52c4a_86[nextMiss85zgensym_43f95b0a7bb52c4a_86]) {
				nextMiss85zgensym_43f95b0a7bb52c4a_86++
			}
			if nextMiss85zgensym_43f95b0a7bb52c4a_86 == maxFields85zgensym_43f95b0a7bb52c4a_86 {
				// filled all the empty fields!
				break doneWithStruct85zgensym_43f95b0a7bb52c4a_86
			}
			missingFieldsLeft85zgensym_43f95b0a7bb52c4a_86--
			curField85zgensym_43f95b0a7bb52c4a_86 = decodeMsgFieldOrder85zgensym_43f95b0a7bb52c4a_86[nextMiss85zgensym_43f95b0a7bb52c4a_86]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField85zgensym_43f95b0a7bb52c4a_86)
		switch curField85zgensym_43f95b0a7bb52c4a_86 {
		// -- templateDecodeMsg ends here --

		case "a":
			found85zgensym_43f95b0a7bb52c4a_86[0] = true
			err = z.Amount.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "d":
			found85zgensym_43f95b0a7bb52c4a_86[1] = true
			z.Description, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss85zgensym_43f95b0a7bb52c4a_86 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of WalletUnlockedOutput
var decodeMsgFieldOrder85zgensym_43f95b0a7bb52c4a_86 = []string{"a", "d"}

var decodeMsgFieldSkip85zgensym_43f95b0a7bb52c4a_86 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *WalletUnlockedOutput) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = false
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Description) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *WalletUnlockedOutput) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_43f95b0a7bb52c4a_87 [2]bool
	fieldsInUse_zgensym_43f95b0a7bb52c4a_88 := z.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_87[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_88 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'WalletUnlockedOutput'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_43f95b0a7bb52c4a_87[0] {
		// write "a"
		err = en.Append(0xa1, 0x61)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.Amount)
		if err != nil {
			return
		}
		if !dup {
			err = z.Amount.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_87[1] {
		// write "d"
		err = en.Append(0xa1, 0x64)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Description)
		if err != nil {
			return
		}
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WalletUnlockedOutput) Msgsize() (s int) {
	s = 1 + 2 + z.Amount.Msgsize() + 2 + msgp.StringPrefixSize + len(z.Description)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *WalletUnlockedOutputMap) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var zgensym_43f95b0a7bb52c4a_93 uint32
	zgensym_43f95b0a7bb52c4a_93, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	if (*z) == nil && zgensym_43f95b0a7bb52c4a_93 > 0 {
		(*z) = make(WalletUnlockedOutputMap, zgensym_43f95b0a7bb52c4a_93)
	} else if len((*z)) > 0 {
		for key, _ := range *z {
			delete((*z), key)
		}
	}
	for zgensym_43f95b0a7bb52c4a_93 > 0 {
		zgensym_43f95b0a7bb52c4a_93--
		var zgensym_43f95b0a7bb52c4a_91 string
		var zgensym_43f95b0a7bb52c4a_92 WalletUnlockedOutput
		zgensym_43f95b0a7bb52c4a_91, err = dc.ReadString()
		if err != nil {
			return
		}
		var field []byte
		_ = field
		const maxFields94zgensym_43f95b0a7bb52c4a_95 = 2

		// -- templateDecodeMsg starts here--
		var totalEncodedFields94zgensym_43f95b0a7bb52c4a_95 uint32
		totalEncodedFields94zgensym_43f95b0a7bb52c4a_95, err = dc.ReadMapHeader()
		if err != nil {
			return
		}
		encodedFieldsLeft94zgensym_43f95b0a7bb52c4a_95 := totalEncodedFields94zgensym_43f95b0a7bb52c4a_95
		missingFieldsLeft94zgensym_43f95b0a7bb52c4a_95 := maxFields94zgensym_43f95b0a7bb52c4a_95 - totalEncodedFields94zgensym_43f95b0a7bb52c4a_95

		var nextMiss94zgensym_43f95b0a7bb52c4a_95 int32 = -1
		var found94zgensym_43f95b0a7bb52c4a_95 [maxFields94zgensym_43f95b0a7bb52c4a_95]bool
		var curField94zgensym_43f95b0a7bb52c4a_95 string

	doneWithStruct94zgensym_43f95b0a7bb52c4a_95:
		// First fill all the encoded fields, then
		// treat the remaining, missing fields, as Nil.
		for encodedFieldsLeft94zgensym_43f95b0a7bb52c4a_95 > 0 || missingFieldsLeft94zgensym_43f95b0a7bb52c4a_95 > 0 {
			//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft94zgensym_43f95b0a7bb52c4a_95, missingFieldsLeft94zgensym_43f95b0a7bb52c4a_95, msgp.ShowFound(found94zgensym_43f95b0a7bb52c4a_95[:]), decodeMsgFieldOrder94zgensym_43f95b0a7bb52c4a_95)
			if encodedFieldsLeft94zgensym_43f95b0a7bb52c4a_95 > 0 {
				encodedFieldsLeft94zgensym_43f95b0a7bb52c4a_95--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					return
				}
				curField94zgensym_43f95b0a7bb52c4a_95 = msgp.UnsafeString(field)
			} else {
				//missing fields need handling
				if nextMiss94zgensym_43f95b0a7bb52c4a_95 < 0 {
					// tell the reader to only give us Nils
					// until further notice.
					dc.PushAlwaysNil()
					nextMiss94zgensym_43f95b0a7bb52c4a_95 = 0
				}
				for nextMiss94zgensym_43f95b0a7bb52c4a_95 < maxFields94zgensym_43f95b0a7bb52c4a_95 && (found94zgensym_43f95b0a7bb52c4a_95[nextMiss94zgensym_43f95b0a7bb52c4a_95] || decodeMsgFieldSkip94zgensym_43f95b0a7bb52c4a_95[nextMiss94zgensym_43f95b0a7bb52c4a_95]) {
					nextMiss94zgensym_43f95b0a7bb52c4a_95++
				}
				if nextMiss94zgensym_43f95b0a7bb52c4a_95 == maxFields94zgensym_43f95b0a7bb52c4a_95 {
					// filled all the empty fields!
					break doneWithStruct94zgensym_43f95b0a7bb52c4a_95
				}
				missingFieldsLeft94zgensym_43f95b0a7bb52c4a_95--
				curField94zgensym_43f95b0a7bb52c4a_95 = decodeMsgFieldOrder94zgensym_43f95b0a7bb52c4a_95[nextMiss94zgensym_43f95b0a7bb52c4a_95]
			}
			//fmt.Printf("switching on curField: '%v'\n", curField94zgensym_43f95b0a7bb52c4a_95)
			switch curField94zgensym_43f95b0a7bb52c4a_95 {
			// -- templateDecodeMsg ends here --

			case "a":
				found94zgensym_43f95b0a7bb52c4a_95[0] = true
				err = zgensym_43f95b0a7bb52c4a_92.Amount.DecodeMsg(dc)
				if err != nil {
					return
				}
			case "d":
				found94zgensym_43f95b0a7bb52c4a_95[1] = true
				zgensym_43f95b0a7bb52c4a_92.Description, err = dc.ReadString()
				if err != nil {
					return
				}
			default:
				err = dc.Skip()
				if err != nil {
					return
				}
			}
		}
		if nextMiss94zgensym_43f95b0a7bb52c4a_95 != -1 {
			dc.PopAlwaysNil()
		}

		(*z)[zgensym_43f95b0a7bb52c4a_91] = zgensym_43f95b0a7bb52c4a_92
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of WalletUnlockedOutput
var decodeMsgFieldOrder94zgensym_43f95b0a7bb52c4a_95 = []string{"a", "d"}

var decodeMsgFieldSkip94zgensym_43f95b0a7bb52c4a_95 = []bool{false, false}

// EncodeMsg implements msgp.Encodable
func (z WalletUnlockedOutputMap) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		return
	}
	for zgensym_43f95b0a7bb52c4a_96, zgensym_43f95b0a7bb52c4a_97 := range z {
		err = en.WriteString(zgensym_43f95b0a7bb52c4a_96)
		if err != nil {
			return
		}

		// honor the omitempty tags
		var empty_zgensym_43f95b0a7bb52c4a_98 [2]bool
		fieldsInUse_zgensym_43f95b0a7bb52c4a_99 := zgensym_43f95b0a7bb52c4a_97.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_98[:])

		// map header
		err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_99 + 1)
		if err != nil {
			return err
		}

		// runtime struct type identification for 'WalletUnlockedOutput'
		err = en.Append(0xa1, 0x40)
		if err != nil {
			return err
		}
		err = en.WriteStringFromBytes([]byte{0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74})
		if err != nil {
			return err
		}

		if !empty_zgensym_43f95b0a7bb52c4a_98[0] {
			// write "a"
			err = en.Append(0xa1, 0x61)
			if err != nil {
				return err
			}
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(zgensym_43f95b0a7bb52c4a_97.Amount)
			if err != nil {
				return
			}
			if !dup {
				err = zgensym_43f95b0a7bb52c4a_97.Amount.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}

		if !empty_zgensym_43f95b0a7bb52c4a_98[1] {
			// write "d"
			err = en.Append(0xa1, 0x64)
			if err != nil {
				return err
			}
			err = en.WriteString(zgensym_43f95b0a7bb52c4a_97.Description)
			if err != nil {
				return
			}
		}

	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z WalletUnlockedOutputMap) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zgensym_43f95b0a7bb52c4a_96, zgensym_43f95b0a7bb52c4a_97 := range z {
			_ = zgensym_43f95b0a7bb52c4a_97
			_ = zgensym_43f95b0a7bb52c4a_96
			s += msgp.StringPrefixSize + len(zgensym_43f95b0a7bb52c4a_96) + 1 + 2 + zgensym_43f95b0a7bb52c4a_97.Amount.Msgsize() + 2 + msgp.StringPrefixSize + len(zgensym_43f95b0a7bb52c4a_97.Description)
		}
	}
	return
}
