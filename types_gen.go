package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CoinOutputState) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			return
		}
		(*z) = CoinOutputState(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CoinOutputState) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CoinOutputState) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ExplorerState) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "currentchangeid":
			err = z.CurrentChangeID.DecodeMsg(dc)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ExplorerState) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "currentchangeid"
	err = en.Append(0x81, 0xaf, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x69, 0x64)
	if err != nil {
		return
	}
	err = z.CurrentChangeID.EncodeMsg(en)
	if err != nil {
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ExplorerState) Msgsize() (s int) {
	s = 1 + 16 + z.CurrentChangeID.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LockType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			return
		}
		(*z) = LockType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z LockType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z LockType) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *NetworkInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "chainName":
			z.ChainName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "networkName":
			z.NetworkName, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z NetworkInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "chainName"
	err = en.Append(0x82, 0xa9, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.ChainName)
	if err != nil {
		return
	}
	// write "networkName"
	err = en.Append(0xab, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.NetworkName)
	if err != nil {
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z NetworkInfo) Msgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.ChainName) + 12 + msgp.StringPrefixSize + len(z.NetworkName)
	return
}
