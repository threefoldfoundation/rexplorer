// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package main

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *CoinOutputState) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_43f95b0a7bb52c4a_0 uint8
		zgensym_43f95b0a7bb52c4a_0, err = dc.ReadUint8()
		(*z) = CoinOutputState(zgensym_43f95b0a7bb52c4a_0)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z CoinOutputState) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteUint8(uint8(z))
	if err != nil {
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CoinOutputState) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ExplorerState) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields1zgensym_43f95b0a7bb52c4a_2 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields1zgensym_43f95b0a7bb52c4a_2 uint32
	totalEncodedFields1zgensym_43f95b0a7bb52c4a_2, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft1zgensym_43f95b0a7bb52c4a_2 := totalEncodedFields1zgensym_43f95b0a7bb52c4a_2
	missingFieldsLeft1zgensym_43f95b0a7bb52c4a_2 := maxFields1zgensym_43f95b0a7bb52c4a_2 - totalEncodedFields1zgensym_43f95b0a7bb52c4a_2

	var nextMiss1zgensym_43f95b0a7bb52c4a_2 int32 = -1
	var found1zgensym_43f95b0a7bb52c4a_2 [maxFields1zgensym_43f95b0a7bb52c4a_2]bool
	var curField1zgensym_43f95b0a7bb52c4a_2 string

doneWithStruct1zgensym_43f95b0a7bb52c4a_2:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft1zgensym_43f95b0a7bb52c4a_2 > 0 || missingFieldsLeft1zgensym_43f95b0a7bb52c4a_2 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft1zgensym_43f95b0a7bb52c4a_2, missingFieldsLeft1zgensym_43f95b0a7bb52c4a_2, msgp.ShowFound(found1zgensym_43f95b0a7bb52c4a_2[:]), decodeMsgFieldOrder1zgensym_43f95b0a7bb52c4a_2)
		if encodedFieldsLeft1zgensym_43f95b0a7bb52c4a_2 > 0 {
			encodedFieldsLeft1zgensym_43f95b0a7bb52c4a_2--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField1zgensym_43f95b0a7bb52c4a_2 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss1zgensym_43f95b0a7bb52c4a_2 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss1zgensym_43f95b0a7bb52c4a_2 = 0
			}
			for nextMiss1zgensym_43f95b0a7bb52c4a_2 < maxFields1zgensym_43f95b0a7bb52c4a_2 && (found1zgensym_43f95b0a7bb52c4a_2[nextMiss1zgensym_43f95b0a7bb52c4a_2] || decodeMsgFieldSkip1zgensym_43f95b0a7bb52c4a_2[nextMiss1zgensym_43f95b0a7bb52c4a_2]) {
				nextMiss1zgensym_43f95b0a7bb52c4a_2++
			}
			if nextMiss1zgensym_43f95b0a7bb52c4a_2 == maxFields1zgensym_43f95b0a7bb52c4a_2 {
				// filled all the empty fields!
				break doneWithStruct1zgensym_43f95b0a7bb52c4a_2
			}
			missingFieldsLeft1zgensym_43f95b0a7bb52c4a_2--
			curField1zgensym_43f95b0a7bb52c4a_2 = decodeMsgFieldOrder1zgensym_43f95b0a7bb52c4a_2[nextMiss1zgensym_43f95b0a7bb52c4a_2]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField1zgensym_43f95b0a7bb52c4a_2)
		switch curField1zgensym_43f95b0a7bb52c4a_2 {
		// -- templateDecodeMsg ends here --

		case "ccid":
			found1zgensym_43f95b0a7bb52c4a_2[0] = true
			err = z.CurrentChangeID.DecodeMsg(dc)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss1zgensym_43f95b0a7bb52c4a_2 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ExplorerState
var decodeMsgFieldOrder1zgensym_43f95b0a7bb52c4a_2 = []string{"ccid"}

var decodeMsgFieldSkip1zgensym_43f95b0a7bb52c4a_2 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *ExplorerState) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = false
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *ExplorerState) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_43f95b0a7bb52c4a_3 [1]bool
	fieldsInUse_zgensym_43f95b0a7bb52c4a_4 := z.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_3[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_4 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'ExplorerState'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_43f95b0a7bb52c4a_3[0] {
		// write "ccid"
		err = en.Append(0xa4, 0x63, 0x63, 0x69, 0x64)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.CurrentChangeID)
		if err != nil {
			return
		}
		if !dup {
			err = z.CurrentChangeID.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ExplorerState) Msgsize() (s int) {
	s = 1 + 5 + z.CurrentChangeID.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *LockType) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_43f95b0a7bb52c4a_5 uint8
		zgensym_43f95b0a7bb52c4a_5, err = dc.ReadUint8()
		(*z) = LockType(zgensym_43f95b0a7bb52c4a_5)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z LockType) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteUint8(uint8(z))
	if err != nil {
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z LockType) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *NetworkInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_43f95b0a7bb52c4a_7 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_43f95b0a7bb52c4a_7 uint32
	totalEncodedFields6zgensym_43f95b0a7bb52c4a_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_43f95b0a7bb52c4a_7 := totalEncodedFields6zgensym_43f95b0a7bb52c4a_7
	missingFieldsLeft6zgensym_43f95b0a7bb52c4a_7 := maxFields6zgensym_43f95b0a7bb52c4a_7 - totalEncodedFields6zgensym_43f95b0a7bb52c4a_7

	var nextMiss6zgensym_43f95b0a7bb52c4a_7 int32 = -1
	var found6zgensym_43f95b0a7bb52c4a_7 [maxFields6zgensym_43f95b0a7bb52c4a_7]bool
	var curField6zgensym_43f95b0a7bb52c4a_7 string

doneWithStruct6zgensym_43f95b0a7bb52c4a_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_43f95b0a7bb52c4a_7 > 0 || missingFieldsLeft6zgensym_43f95b0a7bb52c4a_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_43f95b0a7bb52c4a_7, missingFieldsLeft6zgensym_43f95b0a7bb52c4a_7, msgp.ShowFound(found6zgensym_43f95b0a7bb52c4a_7[:]), decodeMsgFieldOrder6zgensym_43f95b0a7bb52c4a_7)
		if encodedFieldsLeft6zgensym_43f95b0a7bb52c4a_7 > 0 {
			encodedFieldsLeft6zgensym_43f95b0a7bb52c4a_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_43f95b0a7bb52c4a_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_43f95b0a7bb52c4a_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_43f95b0a7bb52c4a_7 = 0
			}
			for nextMiss6zgensym_43f95b0a7bb52c4a_7 < maxFields6zgensym_43f95b0a7bb52c4a_7 && (found6zgensym_43f95b0a7bb52c4a_7[nextMiss6zgensym_43f95b0a7bb52c4a_7] || decodeMsgFieldSkip6zgensym_43f95b0a7bb52c4a_7[nextMiss6zgensym_43f95b0a7bb52c4a_7]) {
				nextMiss6zgensym_43f95b0a7bb52c4a_7++
			}
			if nextMiss6zgensym_43f95b0a7bb52c4a_7 == maxFields6zgensym_43f95b0a7bb52c4a_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_43f95b0a7bb52c4a_7
			}
			missingFieldsLeft6zgensym_43f95b0a7bb52c4a_7--
			curField6zgensym_43f95b0a7bb52c4a_7 = decodeMsgFieldOrder6zgensym_43f95b0a7bb52c4a_7[nextMiss6zgensym_43f95b0a7bb52c4a_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_43f95b0a7bb52c4a_7)
		switch curField6zgensym_43f95b0a7bb52c4a_7 {
		// -- templateDecodeMsg ends here --

		case "cn":
			found6zgensym_43f95b0a7bb52c4a_7[0] = true
			z.ChainName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "nn":
			found6zgensym_43f95b0a7bb52c4a_7[1] = true
			z.NetworkName, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_43f95b0a7bb52c4a_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of NetworkInfo
var decodeMsgFieldOrder6zgensym_43f95b0a7bb52c4a_7 = []string{"cn", "nn"}

var decodeMsgFieldSkip6zgensym_43f95b0a7bb52c4a_7 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z NetworkInfo) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.ChainName) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.NetworkName) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z NetworkInfo) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_43f95b0a7bb52c4a_8 [2]bool
	fieldsInUse_zgensym_43f95b0a7bb52c4a_9 := z.fieldsNotEmpty(empty_zgensym_43f95b0a7bb52c4a_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_43f95b0a7bb52c4a_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'NetworkInfo'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f})
	if err != nil {
		return err
	}

	if !empty_zgensym_43f95b0a7bb52c4a_8[0] {
		// write "cn"
		err = en.Append(0xa2, 0x63, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ChainName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_43f95b0a7bb52c4a_8[1] {
		// write "nn"
		err = en.Append(0xa2, 0x6e, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteString(z.NetworkName)
		if err != nil {
			return
		}
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z NetworkInfo) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ChainName) + 3 + msgp.StringPrefixSize + len(z.NetworkName)
	return
}
